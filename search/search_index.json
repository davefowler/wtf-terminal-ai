{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"wtf","text":"<p>Because working in the command line often leaves you asking <code>wtf</code>.</p>"},{"location":"#what-is-this","title":"What is this?","text":"<p><code>wtf</code> is a sometimes helpful, usually unpleasant AI assistant for your terminal. It is there for you when you mess up. </p> <p>Hit an error? Just type <code>wtf</code>. Made a mistake? Say <code>wtf undo</code>. Need to install something? <code>wtf install [thing]</code>. Forgot a command? Ask <code>wtf can you back me out of this failed merge attempt?</code></p> <p>No flags to remember. No manual pages written in ancient Sumerian. Just describe what you want in plain English (or whatever language you prefer, we're not picky).</p>"},{"location":"#wtf-does-this-exist","title":"wtf does this exist?","text":"<p>Brain rot is real, as is the excess of information that insists on you remembering it.  Like any good drug <code>wtf</code> offers you relief from your brain rot condition while quickening its ascent.  </p> <p>Why spend time challenging your mind with learning tools, commands, and how things work when its so deliciously easy to just let the ai do the thinking for you?</p>"},{"location":"#wtf-is-this-for","title":"wtf is this for?","text":""},{"location":"#data-analysts-non-engineers","title":"Data Analysts &amp; Non-Engineers","text":"<p>More and more people are now able to work with code and command lines: data analysts using git for dbt models, designers and product managers vibe coding prototype features, marketers working with static sites. <code>wtf</code> helps with setups, remembering commands, and gets them out of jams when things inevitably break.</p>"},{"location":"#engineers","title":"Engineers","text":"<p>There are so many tools and commands to remember. You get stuck, you make mistakes, you get slowed down having to go read docs or switch over to ask your llm of choice. But now you can just stay in your terminal and have it answer or even fix your problems as they come up.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>$ git rebase -i HEAD~5\n# Oh no, you messed up the rebase\n$ wtf\n\nI see you are in the middle of a rebase. Let me guess - you picked\nthe wrong commit? Happens to the best of us. Actually, it happens\nto everyone. Rebasing is just UI/UX for masochists.\n\nHere is how to get out:\n\n$ git rebase --abort\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Context Aware: Knows your shell history, git status, and project type</li> <li>Permission System: Won't run dangerous commands without asking</li> <li>Undo Feature: Analyzes history and suggests safe reversals</li> <li>Memories: Learns your preferences (\"I use npm, not yarn\")</li> <li>Multi-Provider AI: Works with Anthropic, OpenAI, or Google</li> <li>Personality: Dry, sardonic wit inspired by Gilfoyle and Marvin</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Three ways to install, because choice is the illusion of control:</p> curl (Recommended)pipFrom Source <pre><code>curl -sSL https://raw.githubusercontent.com/davefowler/wtf-terminal-ai/main/install.sh | bash\n</code></pre> <pre><code>pip install wtf-ai\n</code></pre> <pre><code>git clone https://github.com/davefowler/wtf-terminal-ai.git\ncd wtf-terminal-ai\npip install -e .\n</code></pre>"},{"location":"#first-use","title":"First Use","text":"<p>Just run <code>wtf</code> with any query. Setup happens automatically:</p> <pre><code>wtf what is the answer to life the universe and everything?\n</code></pre> <p>The setup wizard will ask you to:</p> <ol> <li>Choose your AI provider (Anthropic, OpenAI, or Google)</li> <li>Enter your API key</li> <li>Select your default model</li> </ol> <p>That's it. You're ready to make mistakes and let AI fix them.</p>"},{"location":"#examples","title":"Examples","text":"<p>Stop reading docs like these.  In the future just ask <code>wtf</code>:</p> <pre><code>wtf what are some examples of what you can do?\n</code></pre> <p>chat with it and ask questions like any other llm</p> <pre><code>wtf what is the oldest city in the world?\n</code></pre> <p>get yourself out of a jam</p> <pre><code>wtf get me out of this githole\n</code></pre> <p>have it try to undo whatever you just f'd up</p> <pre><code>wtf undo\n</code></pre> <p>install something for you (politeness optional)</p> <pre><code>wtf please install x\n</code></pre> <p>figure out what you should install</p> <pre><code>wtf i want to check my internet speed.  can you install something to do that and check?\n</code></pre> <p>have it remember things about you, your preferences and your projects</p> <pre><code>wtf remember that i live in San Francisco and my favorite editor is emacs\n</code></pre> <p>search for things (if search key added)</p> <pre><code>wtf is it nice outside?\n</code></pre> <p>pick yourself up</p> <pre><code>wtf i need some inspiration today.  hit me with a quote\n</code></pre> <p>replace your therapist (disclaimer: this is not and endorced use case)</p> <pre><code>wtf \"okay here's a scenerio, tell me AITA? ...\"\n</code></pre> <p>debug errors</p> <pre><code>wtf just happend?  fix?\n</code></pre>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>Getting Started - Detailed installation guide</li> <li>Setup - Configure wtf for first use</li> <li>Quick Tour - See what wtf can do</li> <li>FAQ - Questions we've asked ourselves</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<p>CLI tools have 47 flags and you need to consult the manual every time. And then the manual is written like a legal document from 1987.  This can really harsh your vibe coding.</p> <p><code>wtf</code> has a different philosophy: you shouldn't need to (read: can't) remember anything. Instead, just describe what you want. The AI figures out the rest.</p> <p>It's not complicated. Which is the point.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>An API key from Anthropic, OpenAI, or Google</li> <li>A terminal (we assume you have this already)</li> <li>Problems (we assume you have these too)</li> </ul>"},{"location":"#license","title":"License","text":"<p>MIT License - Use it, abuse it, just don't blame us when Skynet takes over.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Issues and PRs welcome. Complain about our jokes. We'll probably read it.</p> <p>GitHub Repository</p>"},{"location":"acknowledgments/","title":"Acknowledgments","text":"<p>Projects that made this possible.</p>"},{"location":"acknowledgments/#inspiration","title":"Inspiration","text":"<p>tAI (Terminal AI) https://github.com/AbanteAI/tAI</p> <p>The original. Proved you could have an AI in your terminal that actually helps.</p> <p>We took the concept, added production features (permissions, memory, hooks), and built something you can actually use daily.</p>"},{"location":"acknowledgments/#critical-dependencies","title":"Critical Dependencies","text":"<p>llm by Simon Willison https://github.com/simonw/llm</p> <p>Model abstraction layer that Just Works\u2122. Supports Anthropic, OpenAI, Google, and local models.</p> <p>Without this, we'd be maintaining API client code for every provider. Hard pass.</p> <p>Rich by Will McGugan https://github.com/Textualize/rich</p> <p>Terminal UI library that doesn't make you hate yourself.</p> <p>Permission prompts, spinners, panels - all Rich. Beautiful terminal output with minimal effort.</p>"},{"location":"acknowledgments/#influenced-by","title":"Influenced By","text":"<p>Aider https://github.com/paul-gauthier/aider</p> <p>Showed that AI + version control is actually useful, not just a gimmick.</p> <p>Watching Aider make intelligent code changes proved AI could understand project context. We applied that lesson to terminal context.</p> <p>GitHub Copilot CLI https://githubnext.com/projects/copilot-cli</p> <p>GitHub's take on terminal AI. Good for suggestions.</p> <p>We wanted execution, not just suggestions. Different goals, different tools.</p>"},{"location":"acknowledgments/#thanks-to","title":"Thanks To","text":"<ul> <li>Anthropic - Claude models that actually follow instructions</li> <li>OpenAI - GPT models for fallback</li> <li>Python - Language that doesn't fight you</li> <li>pytest - Testing framework that makes sense</li> </ul>"},{"location":"acknowledgments/#philosophy-credit","title":"Philosophy Credit","text":"<p>The Gilfoyle/Marvin personality isn't accidental:</p> <p>Gilfoyle (Silicon Valley) - Sarcastic but competent Marvin (Hitchhiker's Guide) - Depressed but brilliant</p> <p>Both characters: Supremely capable, mildly contemptuous, always technically correct.</p> <p>That's the vibe.</p>"},{"location":"acknowledgments/#license","title":"License","text":"<p>MIT. Do whatever you want with this code.</p> <p>If you make something cool, let us know. If you don't, that's fine too.</p>"},{"location":"comparison/","title":"Comparison to Other Tools","text":"<p>Because you're probably wondering if this is just another ChatGPT wrapper.</p>"},{"location":"comparison/#vs-github-copilot-cli","title":"vs. GitHub Copilot CLI","text":"<p>Copilot CLI: Suggests commands. You copy-paste.</p> <p>wtf: Suggests commands. Executes them. Learns your preferences. Remembers context.</p> <p>Copilot is a suggestion engine. wtf is an execution engine.</p>"},{"location":"comparison/#vs-aider","title":"vs. Aider","text":"<p>Aider: Edits code files. Great for refactoring.</p> <p>wtf: Handles terminal commands. Great for \"how do I even...?\"</p> <p>Different tools, different problems. Use both.</p>"},{"location":"comparison/#vs-chatgptclaude-in-browser","title":"vs. ChatGPT/Claude in browser","text":"<p>Browser AI: General knowledge. Context-free.</p> <p>wtf: Terminal-specific. Has your history, git status, project type. Contextual.</p> <p>Browser AI: \"Here's how authentication generally works.\" wtf: \"You're in a Node project with JWT tokens in auth.js line 23. Want me to add refresh token logic?\"</p>"},{"location":"comparison/#vs-tai-terminal-ai","title":"vs. tAI (Terminal AI)","text":"<p>tAI: Inspired this project. Simpler, more experimental.</p> <p>wtf: Production-ready. Permissions system. Memory. Hooks.</p> <p>tAI proved the concept. wtf made it usable.</p> <p>Credit where it's due: https://github.com/AbanteAI/tAI</p>"},{"location":"comparison/#vs-shell-aliases","title":"vs. Shell aliases","text":"<p>Aliases: Static shortcuts. <code>alias gs='git status'</code></p> <p>wtf: Dynamic reasoning. Understands intent.</p> <p>Aliases: You remember the shortcut. wtf: You say what you want.</p> <p>Example: - Alias: <code>deploy-prod</code> - wtf: \"deploy to production but check if tests passed first\"</p> <p>Different complexity levels.</p>"},{"location":"comparison/#vs-shell-completion","title":"vs. Shell completion","text":"<p>Completion: Completes commands you already know.</p> <p>wtf: Figures out commands you don't know.</p> <p>Completion: \"Tab to finish this git comm...\" wtf: \"I have no idea how to do this, figure it out.\"</p>"},{"location":"comparison/#the-real-question","title":"The Real Question","text":"<p>\"Should I use this instead of X?\"</p> <p>Probably use it with X.</p> <ul> <li>Use aliases for common commands</li> <li>Use Aider for code changes</li> <li>Use Copilot for suggestions</li> <li>Use wtf when you're confused</li> </ul> <p>They're complementary, not competitive.</p>"},{"location":"comparison/#what-wtf-actually-solves","title":"What wtf Actually Solves","text":"<ol> <li>Context loss - AI knows your terminal state</li> <li>Command syntax - Don't memorize flags</li> <li>Error recovery - Hit error, type wtf</li> <li>Undo - Reverse mistakes easily</li> <li>Memory - Learns your preferences</li> </ol> <p>If these aren't your problems, you don't need wtf.</p> <p>If they are, welcome aboard.</p>"},{"location":"comparison/#acknowledgments","title":"Acknowledgments","text":"<p>Standing on shoulders of:</p> <ul> <li>tAI - Original inspiration</li> <li>Aider - Showed AI + version control works</li> <li>llm (Simon Willison) - Model abstraction layer</li> <li>Rich - Terminal UI that doesn't suck</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#is-this-like-github-copilot-for-the-terminal","title":"Is this like GitHub Copilot for the terminal?","text":"<p>Sort of, but Copilot autocompletes code. We fix your mistakes after you've already made them. It's the difference between a copilot and a very sarcastic flight attendant who tells you how to use the emergency exit after you've already crashed.</p>"},{"location":"faq/#why-wtf","title":"Why \"wtf\"?","text":"<p>Because that's what everyone says when something goes wrong in the terminal. We just made it actually useful instead of an expression of existential dread.</p>"},{"location":"faq/#is-my-data-sent-to-ai-providers","title":"Is my data sent to AI providers?","text":"<p>Yes. Your shell history, git status, and query are sent to the AI provider you chose (Anthropic, OpenAI, or Google). This is how the AI understands your context.</p> <p>What's NOT sent: - File contents (unless you explicitly ask) - Environment variables - Passwords or secrets</p> <p>See each provider's privacy policy for how they handle data.</p>"},{"location":"faq/#can-i-use-this-offline","title":"Can I use this offline?","text":"<p>No. wtf requires an API connection to function. That's the trade-off for having an AI that actually understands your problems instead of just printing error codes.</p>"},{"location":"faq/#does-this-work-on-windows","title":"Does this work on Windows?","text":"<p>In theory, yes, if you're using WSL (Windows Subsystem for Linux). In practice, we haven't tested it because Windows already has its own wtf-inducing complexity.</p>"},{"location":"faq/#setup-configuration","title":"Setup &amp; Configuration","text":""},{"location":"faq/#i-already-have-a-wtf-alias-can-i-still-use-this","title":"I already have a <code>wtf</code> alias. Can I still use this?","text":"<p>Yes! The installation script detects this and offers alternatives:</p> <ul> <li><code>wtfai</code> - Full name, no confusion</li> <li><code>wai</code> - Shorter, still unique</li> </ul> <p>You can also manually create an alias:</p> <pre><code>alias wai='wtf'\n</code></pre>"},{"location":"faq/#can-i-change-ai-providers-later","title":"Can I change AI providers later?","text":"<p>Yes. Run the setup wizard again:</p> <pre><code>wtf --setup\n</code></pre>"},{"location":"faq/#where-is-my-config-stored","title":"Where is my config stored?","text":"<p><code>~/.config/wtf/</code> contains:</p> <ul> <li><code>config.json</code> - Main configuration</li> <li><code>allowlist.json</code> - Commands that run without permission</li> <li><code>denylist.json</code> - Commands that are always blocked</li> <li><code>memories.json</code> - Your preferences</li> <li><code>history.jsonl</code> - Conversation history</li> <li><code>wtf.md</code> - Custom instructions for the AI</li> </ul>"},{"location":"faq/#can-i-customize-the-ais-personality","title":"Can I customize the AI's personality?","text":"<p>Yes! Edit <code>~/.config/wtf/wtf.md</code> to add custom instructions:</p> <pre><code># My Custom Instructions\n\n- Be more cheerful\n- Always suggest Python over JavaScript\n- Never use emojis\n</code></pre> <p>The AI will read this and adapt its responses.</p>"},{"location":"faq/#what-commands-can-run-without-permission","title":"What commands can run without permission?","text":"<p>86 safe, read-only commands auto-execute:</p> <ul> <li><code>git status</code>, <code>git log</code>, <code>git diff</code> (read-only git)</li> <li><code>ls</code>, <code>cat</code>, <code>pwd</code>, <code>echo</code> (file viewing)</li> <li><code>npm list</code>, <code>pip show</code> (package inspection)</li> <li><code>which</code>, <code>command -v</code> (command checking)</li> <li>Full list</li> </ul> <p>You can add your own to the allowlist.</p>"},{"location":"faq/#usage","title":"Usage","text":""},{"location":"faq/#how-do-i-undo-something","title":"How do I undo something?","text":"<pre><code>wtf undo\nwtf undo that commit\nwtf undo the last 3 commands\n</code></pre> <p>The AI analyzes your shell history and suggests safe reversal commands.</p>"},{"location":"faq/#can-wtf-execute-commands-automatically","title":"Can wtf execute commands automatically?","text":"<p>Only safe, read-only commands. Everything else requires your permission.</p> <p>You can mark commands as \"always allow\" to skip the prompt next time.</p>"},{"location":"faq/#what-if-i-dont-want-wtf-to-remember-something","title":"What if I don't want wtf to remember something?","text":"<pre><code>wtf forget about [thing]\nwtf clear all memories\n</code></pre>"},{"location":"faq/#can-i-see-my-conversation-history","title":"Can I see my conversation history?","text":"<p>It's stored in <code>~/.config/wtf/history.jsonl</code>. Each line is a JSON object:</p> <pre><code>{\"timestamp\": \"2024-01-01T12:00:00\", \"query\": \"...\", \"response\": \"...\", \"commands\": [...]}\n</code></pre>"},{"location":"faq/#does-wtf-work-in-vim","title":"Does wtf work in Vim?","text":"<p>No, because if you're in Vim, you're already too far gone. Just type <code>:q!</code> and try again.</p> <p>(Serious answer: wtf is a shell command, not a Vim plugin. Use it before or after Vim, not during.)</p>"},{"location":"faq/#privacy-security","title":"Privacy &amp; Security","text":""},{"location":"faq/#what-data-does-wtf-collect","title":"What data does wtf collect?","text":"<p>wtf itself collects nothing. Your data goes to whichever AI provider you chose:</p> <ul> <li>Anthropic: https://www.anthropic.com/legal/privacy</li> <li>OpenAI: https://openai.com/policies/privacy-policy</li> <li>Google: https://policies.google.com/privacy</li> </ul> <p>All conversation history is stored locally in <code>~/.config/wtf/history.jsonl</code>.</p>"},{"location":"faq/#can-wtf-run-dangerous-commands","title":"Can wtf run dangerous commands?","text":"<p>Not without your permission. Dangerous patterns are detected:</p> <ul> <li><code>rm -rf /</code> - System deletion</li> <li><code>chmod 777</code> - Permission bombs</li> <li><code>:(){ :|:&amp; };:</code> - Fork bombs</li> <li>Anything with <code>sudo</code> requires permission</li> </ul> <p>You can add commands to the denylist to block them entirely.</p>"},{"location":"faq/#what-if-wtf-suggests-something-wrong","title":"What if wtf suggests something wrong?","text":"<p>AI makes mistakes. Always review commands before approving.</p> <ul> <li>Read the explanation</li> <li>Check the command</li> <li>Use <code>[n]o</code> to decline</li> <li>Report bad suggestions as issues</li> </ul>"},{"location":"faq/#can-i-audit-what-commands-were-run","title":"Can I audit what commands were run?","text":"<p>Yes. Check <code>~/.config/wtf/history.jsonl</code> for a complete log of queries, responses, and executed commands.</p>"},{"location":"faq/#usage-issues","title":"Usage Issues","text":""},{"location":"faq/#i-get-zsh-no-matches-found-errors","title":"I get \"zsh: no matches found\" errors","text":"<p>This happens when you use <code>?</code> or <code>*</code> in your query without quotes:</p> <pre><code>$ wtf are you there?\nzsh: no matches found: there?\n</code></pre> <p>Solution 1: Add the noglob alias (recommended)</p> <p>Add this to your <code>~/.zshrc</code>:</p> <pre><code>alias wtf='noglob wtf'\n</code></pre> <p>Then restart your shell: <code>source ~/.zshrc</code></p> <p>Now you can use: <code>wtf are you there?</code> without quotes.</p> <p>Solution 2: Always use quotes</p> <pre><code>wtf \"are you there?\"\n</code></pre> <p>The install script adds the noglob alias automatically. If you installed via pip, add it manually.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#wtf-is-slow","title":"wtf is slow","text":"<ul> <li>Check your internet connection</li> <li>Try a faster model (gpt-4o-mini, claude-haiku, gemini-flash)</li> <li>The AI provider might be experiencing issues</li> </ul>"},{"location":"faq/#api-rate-limit-errors","title":"API rate limit errors","text":"<p>You've hit your provider's rate limit. Wait a few minutes or upgrade your API plan.</p>"},{"location":"faq/#wtf-suggests-the-same-wrong-thing-repeatedly","title":"wtf suggests the same wrong thing repeatedly","text":"<p>The AI doesn't learn from your corrections within a conversation. If it keeps suggesting the wrong approach:</p> <ol> <li>Use more specific queries</li> <li>Add custom instructions in <code>~/.config/wtf/wtf.md</code></li> <li>Teach it your preferences: <code>wtf remember I use emacs</code></li> </ol>"},{"location":"faq/#commands-arent-executing","title":"Commands aren't executing","text":"<p>Check if they're in the denylist:</p> <pre><code>cat ~/.config/wtf/denylist.json\n</code></pre> <p>Remove entries you want to allow.</p>"},{"location":"faq/#philosophy","title":"Philosophy","text":""},{"location":"faq/#why-the-sarcastic-personality","title":"Why the sarcastic personality?","text":"<p>Because dealing with terminal problems is already frustrating. Might as well have some fun with it.</p> <p>Plus, Gilfoyle and Marvin are icons of technical competence mixed with world-weary resignation. Seemed fitting for a tool that helps you when you're asking \"wtf?\"</p>"},{"location":"faq/#can-i-disable-the-personality","title":"Can I disable the personality?","text":"<p>You can tone it down with custom instructions:</p> <pre><code># ~/.config/wtf/wtf.md\n\nPlease be more straightforward and less sarcastic in your responses.\n</code></pre> <p>But where's the fun in that?</p>"},{"location":"faq/#is-this-replacing-stack-overflow","title":"Is this replacing Stack Overflow?","text":"<p>No. Stack Overflow is for when you have a specific question. wtf is for when you've already messed something up and need immediate help.</p> <p>Think of it as the difference between reading a manual and calling a friend who's good at computers.</p>"},{"location":"faq/#contributing","title":"Contributing","text":""},{"location":"faq/#i-found-a-bug","title":"I found a bug","text":"<p>Report it: https://github.com/davefowler/wtf-terminal-ai/issues</p> <p>Include: - Your wtf version (<code>wtf --version</code>) - The command you ran - What happened vs. what you expected - The AI provider/model you're using</p>"},{"location":"faq/#i-want-to-add-a-feature","title":"I want to add a feature","text":"<p>PRs welcome! Check the existing issues first to see if it's already planned.</p>"},{"location":"faq/#can-i-contribute-to-the-allowlist-of-safe-commands","title":"Can I contribute to the allowlist of safe commands?","text":"<p>Yes! The allowlist is defined in <code>wtf/core/permissions.py</code>. Submit a PR with:</p> <ul> <li>The command pattern</li> <li>Why it's safe (read-only, no side effects)</li> <li>Example use cases</li> </ul>"},{"location":"faq/#the-ais-personality-isnt-gilfoyle-enough","title":"The AI's personality isn't Gilfoyle enough","text":"<p>We're open to prompt improvements. Submit a PR to <code>wtf/ai/prompts.py</code> with specific examples of how the personality should change.</p>"},{"location":"faq/#meta","title":"Meta","text":""},{"location":"faq/#who-made-this","title":"Who made this?","text":"<p>Developers who got tired of Googling the same error messages.</p>"},{"location":"faq/#is-this-a-joke","title":"Is this a joke?","text":"<p>No. It's real software that solves real problems. The jokes are just self-defense mechanisms.</p>"},{"location":"faq/#can-i-use-this-for-commercial-projects","title":"Can I use this for commercial projects?","text":"<p>Yes. MIT License. Go wild.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Welcome to the last manual installation you'll ever need.  In the future you'll just be able to do <code>wtf install X</code>.  </p> <p>Take your time. Read through and debate the 3 different options. Reminice on the changing of an era.  </p>"},{"location":"getting-started/#option-1-curl-recommended","title":"Option 1: curl (Recommended)","text":"<p>The installation script handles everything, including collision detection:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/davefowler/wtf-terminal-ai/main/install.sh | bash\n</code></pre> <p>This will:</p> <ul> <li>Check for Python 3.10+</li> <li>Install wtf-ai via pip</li> <li>Detect if you already have a <code>wtf</code> alias/command</li> <li>Offer alternative names (wtfai, wai) if collision detected</li> <li>Set up PATH if needed</li> </ul>"},{"location":"getting-started/#option-2-pip","title":"Option 2: pip","text":"<pre><code>pip install wtf-ai\n</code></pre> <p>Simple. Direct. No frills. Just like we like our coffee.</p>"},{"location":"getting-started/#option-3-from-source","title":"Option 3: From Source","text":"<p>For the brave souls who like living on the edge:</p> <pre><code>git clone https://github.com/davefowler/wtf-terminal-ai.git\ncd wtf-terminal-ai\npip install -e .\n</code></pre>"},{"location":"getting-started/#first-run","title":"First Run","text":"<p>On first use, wtf automatically runs a setup wizard:</p> <pre><code>$ wtf \"what's wrong?\"\n\n\u26a0  No configuration found. Running setup wizard...\n\nWelcome to wtf setup!\n\nLet's get you configured. This will only take a moment.\n\nStep 1: Choose your AI provider\n\n  1. Anthropic (Claude)\n  2. OpenAI (GPT)\n  3. Google (Gemini)\n\nSelect provider [1]: _\n</code></pre>"},{"location":"getting-started/#choose-your-provider","title":"Choose Your Provider","text":"<p>Anthropic Claude (Recommended) - Best at understanding context - Most \"Gilfoyle-like\" responses - Get key: https://console.anthropic.com/settings/keys</p> <p>OpenAI GPT - Fastest responses - Most widely available - Get key: https://platform.openai.com/api-keys</p> <p>Google Gemini - Good multimodal support - Free tier available - Get key: https://makersuite.google.com/app/apikey</p>"},{"location":"getting-started/#api-key-setup","title":"API Key Setup","text":"<p>You can store your API key in two ways:</p> <p>Environment Variable (Recommended) <pre><code>export ANTHROPIC_API_KEY='your-key-here'\nexport OPENAI_API_KEY='your-key-here'\nexport GOOGLE_API_KEY='your-key-here'\n</code></pre></p> <p>Add to your <code>~/.zshrc</code> or <code>~/.bashrc</code> to persist.</p> <p>Config File The wizard can store it in <code>~/.config/wtf/config.json</code> for you.</p> <p>Warning</p> <p>Config file storage is convenient but less secure. Use environment variables in production.</p>"},{"location":"getting-started/#model-selection","title":"Model Selection","text":"<p>Each provider offers multiple models:</p> <p>Anthropic: - claude-3.5-sonnet (Recommended) - Best balance - claude-3-opus - Most capable, slower - claude-3-haiku - Fastest, lighter</p> <p>OpenAI: - gpt-4o (Recommended) - Latest, best - gpt-4o-mini - Faster, cheaper - gpt-4-turbo - Previous generation</p> <p>Google: - gemini-1.5-pro (Recommended) - Most capable - gemini-1.5-flash - Faster responses</p>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<pre><code>wtf --version\n# wtf 0.1.0\n\nwtf \"hello\"\n# [AI responds with personality]\n</code></pre>"},{"location":"getting-started/#shell-integration-important","title":"Shell Integration (Important!)","text":"<p>To use wtf without quotes around every query, add this to your <code>~/.zshrc</code> or <code>~/.bashrc</code>:</p> <pre><code>alias wtf='noglob wtf'\n</code></pre> <p>Then restart your shell: <code>source ~/.zshrc</code></p> <p>Why? Without this, zsh/bash will try to expand <code>?</code> and <code>*</code> as glob patterns:</p> <pre><code># Without alias - ERROR\nwtf are you there?\n# zsh: no matches found: there?\n\n# With alias - WORKS\nwtf are you there?\n# [AI responds]\n\n# Always works with quotes\nwtf \"are you there?\"\n# [AI responds]\n</code></pre> <p>The curl installation script adds this alias automatically.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Tour - See what wtf can do</li> <li>Configuration - Customize your setup</li> <li>FAQ - Common questions</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>wtf: command not found</p> <p>Your PATH doesn't include the pip installation directory. Add this to <code>~/.zshrc</code> or <code>~/.bashrc</code>:</p> <pre><code>export PATH=\"$PATH:$HOME/.local/bin\"\n</code></pre> <p>Then: <code>source ~/.zshrc</code></p> <p>API key errors</p> <p>Make sure your API key is set:</p> <pre><code>echo $ANTHROPIC_API_KEY  # Should print your key\n</code></pre> <p>If empty, set it in your shell config or run: <code>wtf --setup</code></p> <p>Python version issues</p> <p>wtf requires Python 3.10+. Check your version:</p> <pre><code>python3 --version\n</code></pre> <p>If too old, install a newer Python:</p> <pre><code># macOS\nbrew install python3\n\n# Ubuntu\nsudo apt install python3.11\n\n# Fedora\nsudo dnf install python3.11\n</code></pre>"},{"location":"quick-tour/","title":"Quick Tour","text":"<p>First off if you want any guidance on how to use <code>wtf</code> just ask it.  You don't have to bother yourself with coming to docs like these and bothering yourself with learning.  But these are still here and mostly AI written for those of you that still like to read from web pages and documentation.  </p> <p><code>wtf</code> is a natural language interface for your terminal. No flags to remember. No syntax to learn. Just describe what you want.</p> <pre><code>$ wtf \"what's my git status?\"\n</code></pre> <p>That's it. <code>wtf</code> figures out the rest.</p>"},{"location":"quick-tour/#key-features","title":"Key Features","text":"<p><code>wtf</code> isn't just a command runner. It has several features that make it more helpful over time:</p> <ul> <li>Undo - Reverse any terminal mistake contextually</li> <li>Memories - Teach it your preferences once, it remembers forever</li> <li>Permissions - Control what runs automatically vs. what needs approval</li> <li>Multi-Step - Execute complex tasks with a single request</li> <li>Context Awareness - Knows your history, git state, and project type</li> <li>Personality - Customize how sarcastic (or helpful) you want it to be</li> <li>Shell Hooks - Better command capture and error detection</li> </ul> <p>All of these work through natural language. You never run <code>wtf --flag-name</code>. You just ask.</p>"},{"location":"quick-tour/#basic-usage","title":"Basic Usage","text":"<pre><code>$ wtf \"what's my git status?\"\n\nAh, the eternal question. Let me check for you.\n\nRunning: git status\n\nOn branch main\nYour branch is ahead of 'origin/main' by 3 commits.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n\nYou're 3 commits ahead. Might want to push those before you forget\nand lose them in the inevitable hard drive failure.\n</code></pre>"},{"location":"quick-tour/#undo","title":"Undo","text":"<p>Made a mistake? Just say undo:</p> <pre><code>$ git commit -m \"wip\"\n$ wtf undo\n\nI see you committed \"wip\". A classic. Right up there with \"asdf\" and\n\"fix stuff\" in the hall of commit message shame.\n\nLet's undo that:\n\n$ git reset --soft HEAD~1\n\nThis keeps your changes but removes the commit. Try again with a commit\nmessage that future you won't hate.\n</code></pre>"},{"location":"quick-tour/#context-awareness","title":"Context Awareness","text":"<p>wtf knows where you are and what you've been doing:</p> <pre><code>$ npm run biuld\nzsh: command not found: biuld\n\n$ wtf\n\nYou typed \"biuld\". I'm going to assume you meant \"build\" and not that\nyou're inventing a new build system called Biuld (please don't).\n\n$ npm run build\n</code></pre>"},{"location":"quick-tour/#memories","title":"Memories","text":"<p>Teach wtf your preferences:</p> <pre><code>$ wtf remember I use emacs for editing\n\u2713 I'll remember: editor = emacs\n\n$ wtf \"open the config file\"\n\nSince you use emacs, here's how to open it:\n\n$ emacs ~/.config/wtf/config.json\n</code></pre> <p>View what it remembers:</p> <pre><code>$ wtf show me what you remember\n\nMemories:\n\n  editor: emacs (2024-01-15)\n  package_manager: npm (2024-01-15)\n  python_version: 3.11 (2024-01-14)\n</code></pre> <p>Forget things:</p> <pre><code>$ wtf forget about editor\n\u2713 Forgot about: editor\n</code></pre>"},{"location":"quick-tour/#permissions","title":"Permissions","text":"<p>Safe commands run automatically:</p> <pre><code>$ wtf \"check if docker is running\"\n\nRunning: docker ps\n\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nabc123         nginx     ...       ...       ...       ...       web\n\nYep, docker is running. Your container is up. Everything's fine. For now.\n</code></pre> <p>Dangerous commands need permission:</p> <pre><code>$ wtf \"delete all node_modules folders\"\n\nI can do that, but it's destructive. Here's what I'll run:\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ find . -name \"node_modules\" -type d -prune -exec rm -rf {} \\; \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nThis will:\n- Find all node_modules directories\n- Delete them recursively\n- Free up approximately 47GB (probably)\n\nRun this command? [Y]es / [yes and a]lways / [n]o:\n</code></pre>"},{"location":"quick-tour/#multi-step-operations","title":"Multi-Step Operations","text":"<p>wtf can execute multiple commands in sequence:</p> <pre><code>$ wtf \"create a new feature branch and switch to it\"\n\nCreating a new branch from main and switching to it.\n\nRunning: git checkout -b feature/new-feature\n\nSwitched to a new branch 'feature/new-feature'\n\nDone. You're now on the new branch. Try not to commit directly to main\nnext time. We've all done it. Still hurts though.\n</code></pre>"},{"location":"quick-tour/#error-explanations","title":"Error Explanations","text":"<p>Hit an error? Just type <code>wtf</code>:</p> <pre><code>$ git push origin main\nTo github.com:user/repo.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'github.com:user/repo.git'\n\n$ wtf\n\nSomeone else pushed to main while you were working. Tale as old as time.\n\nHere's how to fix it:\n\n1. Fetch the remote changes:\n   $ git fetch origin\n\n2. Merge them (or rebase if you're feeling fancy):\n   $ git pull --rebase origin main\n\n3. Try pushing again:\n   $ git push origin main\n\nOr if you're absolutely sure your changes are correct and everyone\nelse is wrong (spoiler: they're not), you can force push. But don't.\nSeriously. Don't.\n</code></pre>"},{"location":"quick-tour/#installation-help","title":"Installation Help","text":"<p>Need to install something:</p> <pre><code>$ wtf install express\n\nI'll install Express via npm:\n\nRunning: npm install express\n\nadded 57 packages, and audited 58 packages in 3s\n\nExpress installed. Now you can build Yet Another REST API. The world\nneeds more of those, apparently.\n</code></pre>"},{"location":"quick-tour/#command-history-integration","title":"Command History Integration","text":"<p>wtf sees your shell history:</p> <pre><code># You ran a bunch of git commands\n$ git add .\n$ git commit -m \"temp\"\n$ git push\n\n$ wtf undo that push\n\nI see you just pushed a commit message called \"temp\". Let's pretend\nthat never happened.\n\nSince you haven't pushed anything else yet, we can:\n\n$ git reset --hard HEAD~1\n$ git push --force-with-lease\n\nThis removes the commit locally and updates the remote. The\n--force-with-lease flag is the \"are you sure\" of force pushing.\n</code></pre>"},{"location":"quick-tour/#personality","title":"Personality","text":"<p>Customize how <code>wtf</code> responds:</p> <pre><code>$ wtf \"be more helpful and less sarcastic\"\n\nGot it. I'll tone down the sass and focus on being helpful.\n\n$ wtf \"git status\"\n\nRunning: git status\n\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nYou're all synced up with the remote. Everything looks good.\n</code></pre> <p>Change it back anytime:</p> <pre><code>$ wtf \"be your normal sarcastic self again\"\n\nOh thank god. Being nice was exhausting.\n</code></pre> <p>View your current personality:</p> <pre><code>$ wtf \"what personality are you using?\"\n\nI'm currently using the default Gilfoyle/Marvin personality - dry,\nsardonic, occasionally helpful. You asked me to be nicer once but\nthat didn't last long.\n</code></pre>"},{"location":"quick-tour/#shell-hooks","title":"Shell Hooks","text":"<p>Install shell hooks for better command capture:</p> <pre><code>$ wtf \"install shell hooks\"\n\nI'll add hooks to your shell to capture commands better.\n\nAdded to ~/.zshrc:\n- preexec hook for command capture\n- precmd hook for error detection\n\nRestart your shell or run: source ~/.zshrc\n\nWith hooks installed, I can:\n- See failed commands immediately (no need to type wtf)\n- Capture command output for better context\n- Track timing information\n</code></pre> <p>Benefits:</p> <ul> <li>Automatic error detection - <code>wtf</code> runs automatically after failures</li> <li>Better context - Sees actual command output, not just history</li> <li>Faster fixes - No need to remember what went wrong</li> </ul>"},{"location":"quick-tour/#getting-help","title":"Getting Help","text":"<pre><code># Just ask wtf for help\n$ wtf \"how do I use you?\"\n\n# Or be more specific\n$ wtf \"show me what you remember about me\"\n$ wtf \"list commands you can auto-run\"\n$ wtf \"help with git\"\n</code></pre> <p>Unlike most CLI tools, <code>wtf</code> doesn't have flags you need to memorize. Just ask naturally.</p>"},{"location":"quick-tour/#tips","title":"Tips","text":"<p>Be specific in your queries: - Good: \"undo my last commit but keep the changes\" - Bad: \"undo\"</p> <p>Use wtf for learning: <pre><code>$ wtf \"explain what git rebase does\"\n</code></pre></p> <p>Combine with pipes: <pre><code>$ wtf \"find large files\" | grep \".log\"\n</code></pre></p> <p>Remember it learns: <pre><code>$ wtf remember I prefer pytest over unittest\n$ wtf \"run tests\"\n# Will use pytest\n</code></pre></p>"},{"location":"quick-tour/#next-steps","title":"Next Steps","text":"<p>Want to dive deeper into specific features?</p> <ul> <li>Undo Feature - Learn all the ways to reverse mistakes</li> <li>Memories - Teach <code>wtf</code> your preferences and workflow</li> <li>Permissions - Fine-tune what runs automatically</li> <li>Configuration - Customize your setup</li> <li>FAQ - Common questions and answers</li> </ul> <p>Or just start using <code>wtf</code> - it's pretty self-explanatory.</p>"},{"location":"setup/","title":"Setup","text":"<p>So you've installed <code>wtf</code>. Now what? Don't worry, it's not complicated.</p>"},{"location":"setup/#first-run","title":"First Run","text":"<p>The first time you run <code>wtf</code>, it'll walk you through a brief setup. No forms to fill out. No accounts to create. Just three questions.</p> <pre><code>$ wtf \"help me\"\n</code></pre>"},{"location":"setup/#the-setup-wizard","title":"The Setup Wizard","text":"<p><code>wtf</code> will ask you:</p> <ol> <li>Choose your AI provider (Anthropic, OpenAI, or Google)</li> <li>Enter your API key </li> <li>Select your default model</li> </ol> <p>That's it. Takes about 30 seconds.</p> <p>API Keys</p> <p>Don't have an API key? See API Keys for where to get one.</p>"},{"location":"setup/#what-gets-configured","title":"What Gets Configured","text":"<p>The wizard creates a config file at <code>~/.config/wtf/config.yaml</code> with:</p> <ul> <li>Your chosen AI provider</li> <li>Your default model</li> <li>Basic settings (all sane defaults)</li> </ul> <p>Your API key is stored securely in your system keychain when possible, or in the config file with appropriate permissions.</p>"},{"location":"setup/#testing-it-out","title":"Testing It Out","text":"<p>Once setup is complete, try a simple command:</p> <pre><code>$ wtf \"what's in my git status?\"\n</code></pre> <p>If you see <code>wtf</code> respond with something helpful (or sarcastic), you're good to go.</p>"},{"location":"setup/#configuration-files-created","title":"Configuration Files Created","text":"<p>After first run, you'll have:</p> <pre><code>~/.config/wtf/\n\u251c\u2500\u2500 config.yaml          # Main configuration\n\u251c\u2500\u2500 conversation.jsonl   # Conversation history\n\u2514\u2500\u2500 allowlist.json       # Auto-execute permissions (created as needed)\n</code></pre>"},{"location":"setup/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Tour - See what <code>wtf</code> can do</li> <li>Memories - Teach <code>wtf</code> your preferences</li> <li>Permissions - Control what runs automatically</li> </ul>"},{"location":"setup/#reconfiguring","title":"Reconfiguring","text":"<p>Want to change providers or models later? Just run:</p> <pre><code>$ wtf \"use a different model\"\n</code></pre> <p>Or edit <code>~/.config/wtf/config.yaml</code> directly. We're not picky.</p>"},{"location":"setup/#troubleshooting-setup","title":"Troubleshooting Setup","text":""},{"location":"setup/#api-key-invalid","title":"\"API key invalid\"","text":"<ul> <li>Double-check you copied the key correctly</li> <li>Make sure the key has the right permissions</li> <li>Some providers have separate keys for different models</li> </ul>"},{"location":"setup/#cant-find-config-directory","title":"\"Can't find config directory\"","text":"<p><code>wtf</code> creates <code>~/.config/wtf/</code> automatically. If it fails:</p> <ul> <li>Check you have write permissions to <code>~/.config/</code></li> <li>Try creating it manually: <code>mkdir -p ~/.config/wtf</code></li> </ul>"},{"location":"setup/#model-not-available","title":"\"Model not available\"","text":"<p>Your API key might not have access to that model. Try a different one or check your provider's console.</p> <p>Need more help? Check Troubleshooting.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and how to fix them.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#command-not-found-wtf","title":"<code>command not found: wtf</code>","text":"<p>Problem: Shell can't find wtf after installation.</p> <p>Solutions:</p> <ol> <li> <p>Restart your shell: <pre><code>exec $SHELL\n</code></pre></p> </li> <li> <p>Check if installed: <pre><code>which wtf\npip list | grep wtf\n</code></pre></p> </li> <li> <p>Install in user mode: <pre><code>pip install --user wtf-ai\n</code></pre></p> </li> <li> <p>Check PATH: <pre><code>echo $PATH | grep -o \"[^:]*python[^:]*\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#name-collision-with-existing-wtf-command","title":"Name collision with existing <code>wtf</code> command","text":"<p>Problem: You already have a <code>wtf</code> command or alias.</p> <p>Solutions:</p> <p>The installer detects collisions automatically. If you see a warning:</p> <pre><code>\u26a0 Name collision detected!\n  'wtf' is already defined in ~/.zshrc\n\nWould you like to:\n  1. Use 'wtfai' instead\n  2. Use 'wai' instead\n  3. Choose custom name\n  4. Cancel installation\n</code></pre> <p>Pick an alternative, or manually resolve:</p> <pre><code># Option 1: Remove old alias\nvim ~/.zshrc  # Remove old 'alias wtf=...'\n\n# Option 2: Install with different name\npip install wtf-ai\nln -s $(which wtf) ~/bin/wai\n</code></pre>"},{"location":"troubleshooting/#api-issues","title":"API Issues","text":""},{"location":"troubleshooting/#invalid-api-key","title":"<code>Invalid API key</code>","text":"<p>Problem: wtf can't authenticate with AI provider.</p> <p>Solutions:</p> <ol> <li> <p>Re-run setup: <pre><code>wtf --setup\n</code></pre></p> </li> <li> <p>Check environment variables: <pre><code>echo $ANTHROPIC_API_KEY\necho $OPENAI_API_KEY\necho $GOOGLE_API_KEY\n</code></pre></p> </li> <li> <p>Set manually: <pre><code>export ANTHROPIC_API_KEY=\"your-key-here\"\n</code></pre></p> </li> <li> <p>Get a new key:</p> </li> <li>Anthropic: https://console.anthropic.com/settings/keys</li> <li>OpenAI: https://platform.openai.com/api-keys</li> <li>Google: https://makersuite.google.com/app/apikey</li> </ol>"},{"location":"troubleshooting/#rate-limit-exceeded","title":"<code>Rate limit exceeded</code>","text":"<p>Problem: Too many requests to AI API.</p> <p>Solutions:</p> <ol> <li>Wait a bit - Limits reset over time</li> <li>Upgrade your API plan - Free tiers have lower limits</li> <li>Switch providers temporarily: <pre><code>wtf --setup  # Choose different provider\n</code></pre></li> </ol>"},{"location":"troubleshooting/#network-error","title":"<code>Network error</code>","text":"<p>Problem: Can't reach AI service.</p> <p>Solutions:</p> <ol> <li> <p>Check internet connection: <pre><code>ping google.com\n</code></pre></p> </li> <li> <p>Check service status:</p> </li> <li>Anthropic: https://status.anthropic.com</li> <li> <p>OpenAI: https://status.openai.com</p> </li> <li> <p>Try different provider: <pre><code>wtf --setup\n</code></pre></p> </li> <li> <p>Check proxy settings if behind corporate firewall</p> </li> </ol>"},{"location":"troubleshooting/#permission-issues","title":"Permission Issues","text":""},{"location":"troubleshooting/#commands-always-ask-for-permission","title":"Commands always ask for permission","text":"<p>Problem: wtf asks every time even after saying \"yes always\".</p> <p>Solutions:</p> <ol> <li> <p>Check allowlist file exists: <pre><code>ls ~/.config/wtf/allowlist.json\n</code></pre></p> </li> <li> <p>Verify pattern was added: <pre><code>cat ~/.config/wtf/allowlist.json\n</code></pre></p> </li> <li> <p>Add manually: <pre><code>echo '{\n  \"patterns\": [\"git *\", \"npm *\"],\n  \"denylist\": []\n}' &gt; ~/.config/wtf/allowlist.json\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#wtf-wont-run-safe-commands","title":"wtf won't run safe commands","text":"<p>Problem: Even <code>git status</code> asks for permission.</p> <p>Cause: Command might be chained or have redirection.</p> <p>Solutions:</p> <ul> <li>Check command isn't chained: <code>git status &amp;&amp; other</code> (will ask)</li> <li>Check no redirection: <code>git status &gt; file</code> (will ask)</li> <li>Single commands should auto-execute: <code>git status</code> (won't ask)</li> </ul>"},{"location":"troubleshooting/#shell-history-issues","title":"Shell History Issues","text":""},{"location":"troubleshooting/#wtf-says-no-shell-history-available","title":"wtf says \"No shell history available\"","text":"<p>Problem: Can't access your command history.</p> <p>Solutions:</p> <ol> <li> <p>Check history is enabled: <pre><code># For zsh\necho $HISTFILE\n\n# For bash\necho $HISTFILE\n</code></pre></p> </li> <li> <p>Enable history: <pre><code># Add to ~/.zshrc or ~/.bashrc\nexport HISTFILE=~/.zsh_history  # or ~/.bash_history\nexport HISTSIZE=10000\nexport SAVEHIST=10000\n</code></pre></p> </li> <li> <p>Check file permissions: <pre><code>ls -la ~/.zsh_history\nchmod 600 ~/.zsh_history\n</code></pre></p> </li> <li> <p>Restart shell after changes: <pre><code>exec $SHELL\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#memory-issues","title":"Memory Issues","text":""},{"location":"troubleshooting/#wtf-forgets-things-i-told-it","title":"wtf forgets things I told it","text":"<p>Problem: Memories not persisting.</p> <p>Solutions:</p> <ol> <li> <p>Check memories file: <pre><code>cat ~/.config/wtf/memories.json\n</code></pre></p> </li> <li> <p>Verify save worked: <pre><code>wtf remember test memory\ncat ~/.config/wtf/memories.json\n</code></pre></p> </li> <li> <p>Check file permissions: <pre><code>ls -la ~/.config/wtf/\nchmod 700 ~/.config/wtf\n</code></pre></p> </li> <li> <p>Manually fix broken file: <pre><code>echo '{}' &gt; ~/.config/wtf/memories.json\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#hook-issues","title":"Hook Issues","text":""},{"location":"troubleshooting/#error-hook-not-triggering","title":"Error hook not triggering","text":"<p>Problem: Installed error hook but nothing happens on failures.</p> <p>Solutions:</p> <ol> <li> <p>Source your shell config: <pre><code>source ~/.zshrc  # or ~/.bashrc\n</code></pre></p> </li> <li> <p>Verify hook was added: <pre><code>grep -A 10 \"wtf-error-hook\" ~/.zshrc\n</code></pre></p> </li> <li> <p>Re-install hook: <pre><code>wtf --remove-hooks\nwtf --setup-error-hook\n</code></pre></p> </li> <li> <p>Check shell compatibility - Hooks work in zsh, bash, fish</p> </li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#wtf-is-slow","title":"wtf is slow","text":"<p>Problem: Takes a long time to respond.</p> <p>Causes &amp; Solutions:</p> <ol> <li> <p>Slow AI provider - Try different model:    <pre><code>wtf --setup  # Choose faster model\n</code></pre></p> </li> <li> <p>Large context - Reduce history size:    <pre><code># Edit ~/.config/wtf/config.json\n{\n  \"behavior\": {\n    \"context_history_size\": 3  # Default is 5\n  }\n}\n</code></pre></p> </li> <li> <p>Network latency - Check connection quality</p> </li> <li> <p>Large git repo - git status might be slow</p> </li> </ol>"},{"location":"troubleshooting/#security","title":"Security","text":""},{"location":"troubleshooting/#is-it-safe-to-give-wtf-my-api-key","title":"Is it safe to give wtf my API key?","text":"<p>Yes. Your API key is stored locally in <code>~/.config/wtf/config.json</code> (mode 600).</p> <p>It's never sent anywhere except to the AI provider you chose.</p> <p>Best practices: 1. Use API keys with spending limits 2. Don't commit <code>config.json</code> to git (it's in .gitignore) 3. Rotate keys periodically 4. Use separate keys for different tools</p>"},{"location":"troubleshooting/#can-wtf-run-dangerous-commands","title":"Can wtf run dangerous commands?","text":"<p>Mostly no, but be careful.</p> <p>Built-in protections: - Denylist blocks dangerous patterns (<code>rm -rf /</code>, <code>dd</code>, etc.) - Permission prompts for non-safe commands - Safe readonly commands auto-execute</p> <p>You can override: - Allowlist can permit anything (be careful!) - You can say \"yes\" to prompts</p> <p>Best practices: 1. Review commands before saying yes 2. Don't allowlist destructive commands 3. Use denylist for commands you never want 4. Read command explanations</p>"},{"location":"troubleshooting/#still-stuck","title":"Still Stuck?","text":"<ol> <li> <p>Check logs: <pre><code>cat ~/.config/wtf/history.jsonl | tail -20\n</code></pre></p> </li> <li> <p>Reset config: <pre><code>mv ~/.config/wtf ~/.config/wtf.backup\nwtf --setup\n</code></pre></p> </li> <li> <p>Report bug: https://github.com/davefowler/wtf-terminal-ai/issues</p> </li> </ol> <p>Include: - Python version: <code>python --version</code> - wtf version: <code>wtf --version</code> - Shell: <code>echo $SHELL</code> - OS: <code>uname -a</code> - Error message and steps to reproduce</p>"},{"location":"config/allowlist/","title":"Allowlist - Commands wtf Can Run","text":"<p>The allowlist lets you control which commands wtf can execute without asking for permission.</p>"},{"location":"config/allowlist/#how-it-works","title":"How It Works","text":"<p>When wtf wants to run a command, it checks:</p> <ol> <li>Denylist first - Is it explicitly forbidden?</li> <li>Safe readonly commands - Is it a safe command like <code>ls</code> or <code>git status</code>?</li> <li>Allowlist - Did you previously approve it?</li> <li>Ask - If none of the above, prompt you</li> </ol>"},{"location":"config/allowlist/#location","title":"Location","text":"<p><code>~/.config/wtf/allowlist.json</code></p>"},{"location":"config/allowlist/#format","title":"Format","text":"<pre><code>{\n  \"patterns\": [\n    \"git *\",\n    \"npm install*\",\n    \"cat *\"\n  ],\n  \"denylist\": [\n    \"rm -rf*\",\n    \"dd*\"\n  ]\n}\n</code></pre>"},{"location":"config/allowlist/#adding-to-allowlist","title":"Adding to Allowlist","text":""},{"location":"config/allowlist/#interactively","title":"Interactively","text":"<p>When wtf asks for permission, press <code>a</code> for \"Yes and always\":</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Permission Required              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Command: git push origin main    \u2502\n\u2502                                  \u2502\n\u2502 [y] Yes, once                    \u2502\n\u2502 [a] Yes, and always allow        \u2502\n\u2502 [n] No                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"config/allowlist/#via-natural-language","title":"Via Natural Language","text":"<pre><code>wtf allow git commands\nwtf give yourself permission to run npm commands\n</code></pre>"},{"location":"config/allowlist/#manually","title":"Manually","text":"<p>Edit <code>~/.config/wtf/allowlist.json</code> and add patterns.</p>"},{"location":"config/allowlist/#pattern-matching","title":"Pattern Matching","text":"<p>Patterns use glob-style matching:</p> <ul> <li><code>git *</code> - Allows all git commands</li> <li><code>npm install*</code> - Allows npm install and npm install anything</li> <li><code>ls</code> - Allows only <code>ls</code> with no arguments</li> <li><code>cat *.txt</code> - Allows reading text files</li> </ul>"},{"location":"config/allowlist/#safe-readonly-commands","title":"Safe Readonly Commands","text":"<p>These commands auto-execute without being in the allowlist:</p> <p>File inspection: - <code>ls</code>, <code>cat</code>, <code>head</code>, <code>tail</code>, <code>less</code>, <code>more</code> - <code>file</code>, <code>stat</code>, <code>wc</code>, <code>diff</code></p> <p>Git (readonly): - <code>git status</code>, <code>git log</code>, <code>git diff</code>, <code>git show</code>, <code>git branch</code></p> <p>Project info: - <code>npm list</code>, <code>pip list</code>, <code>cargo --version</code> - <code>command -v</code>, <code>which</code>, <code>type</code></p> <p>System info: - <code>pwd</code>, <code>whoami</code>, <code>uname</code>, <code>date</code>, <code>env</code></p> <p>Chaining Blocks Auto-Execution</p> <p>If a command contains <code>&amp;&amp;</code>, <code>||</code>, <code>;</code>, <code>$()</code>, or redirection (<code>&gt;</code>, <code>|</code>), it's NOT auto-executed even if it's safe. You'll be prompted.</p> <p>Example: <code>git status &amp;&amp; rm file</code> will ask permission (because of <code>&amp;&amp;</code>).</p>"},{"location":"config/allowlist/#denylist","title":"Denylist","text":"<p>The denylist ALWAYS blocks commands, even if they're in the allowlist.</p> <p>Default dangerous patterns: - <code>rm -rf /</code> - <code>dd if=*</code> - <code>mkfs.*</code> - <code>:(){:|:&amp;};:</code>  (fork bomb) - <code>chmod -R 777 /</code> - <code>sudo rm *</code></p> <p>Add more patterns to the denylist in <code>allowlist.json</code>:</p> <pre><code>{\n  \"patterns\": [...],\n  \"denylist\": [\n    \"rm -rf*\",\n    \"dd*\",\n    \"custom-dangerous-command*\"\n  ]\n}\n</code></pre>"},{"location":"config/allowlist/#removing-from-allowlist","title":"Removing from Allowlist","text":""},{"location":"config/allowlist/#via-natural-language_1","title":"Via Natural Language","text":"<pre><code>wtf stop auto-running git commands\nwtf remove git from my allowlist\n</code></pre>"},{"location":"config/allowlist/#manually_1","title":"Manually","text":"<p>Edit <code>~/.config/wtf/allowlist.json</code> and remove the pattern.</p>"},{"location":"config/allowlist/#example-workflow","title":"Example Workflow","text":"<pre><code># First time\n$ wtf \"push my changes\"\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Permission Required              \u2502\n\u2502 Command: git push origin main    \u2502\n\u2502 [y] [a] [n]                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n&gt; a\n\n# Now allowed\n$ wtf \"push again\"\n\u2713 Running: git push origin main\n[... command output ...]\n\n# If you change your mind\n$ wtf stop auto-running git push\n\u2713 Removed \"git push*\" from allowlist\n</code></pre>"},{"location":"config/allowlist/#security-notes","title":"Security Notes","text":"<ol> <li>Be specific - Use <code>npm install express</code> not <code>npm *</code></li> <li>Review periodically - Check <code>allowlist.json</code> occasionally</li> <li>Never allowlist destructive commands - Like <code>rm</code>, <code>dd</code>, <code>mkfs</code></li> <li>Understand patterns - <code>*</code> matches anything, be careful</li> </ol>"},{"location":"config/allowlist/#see-also","title":"See Also","text":"<ul> <li>Permissions - How permission system works</li> <li>Security - Security best practices</li> </ul>"},{"location":"config/api-keys/","title":"API Key Management in wtf","text":""},{"location":"config/api-keys/#overview","title":"Overview","text":"<p>wtf now has a unified <code>wtf_config</code> tool for managing all API keys and settings. Users can configure keys conversationally.</p>"},{"location":"config/api-keys/#usage","title":"Usage","text":""},{"location":"config/api-keys/#save-api-keys","title":"Save API Keys","text":"<p>Users can save API keys naturally:</p> <pre><code># Save Brave Search key\nwtf here is my brave search api key sk-1234567890\n\n# Save other keys\nwtf save my anthropic key sk-ant-xxxxx\nwtf here is my openai api key sk-xxxxx\n</code></pre> <p>The AI will use the <code>wtf_config</code> tool to save these to <code>~/.config/wtf/config.json</code> under <code>api_keys</code> section.</p>"},{"location":"config/api-keys/#check-api-keys","title":"Check API Keys","text":"<pre><code>wtf do I have a brave search key configured?\nwtf show me my api keys\n</code></pre>"},{"location":"config/api-keys/#config-storage","title":"Config Storage","text":"<p>API keys are stored in <code>~/.config/wtf/config.json</code>:</p> <pre><code>{\n  \"version\": \"0.1.0\",\n  \"api\": {\n    \"provider\": \"anthropic\",\n    \"model\": \"claude-3.5-sonnet\"\n  },\n  \"api_keys\": {\n    \"brave_search\": \"your-key-here\",\n    \"custom_service\": \"another-key\"\n  }\n}\n</code></pre>"},{"location":"config/api-keys/#tool-implementation","title":"Tool Implementation","text":"<p>The <code>wtf_config</code> tool handles:</p> <ul> <li>set_api_key: Save API key to config</li> <li>get_api_key: Retrieve stored API key</li> <li>set_setting: Update general settings (behavior, shell, etc.)</li> <li>get_setting: Read config values</li> </ul>"},{"location":"config/api-keys/#web-search-integration","title":"Web Search Integration","text":"<p>All three web search providers (Serper, Bing, Brave) are now fully implemented.</p> <p>Each search tool checks for API key in two places: 1. Config file: <code>config.api_keys.serper</code>, <code>config.api_keys.bing_search</code>, <code>config.api_keys.brave_search</code> 2. Environment variables: <code>SERPER_API_KEY</code>, <code>BING_SEARCH_API_KEY</code>, <code>BRAVE_SEARCH_API_KEY</code></p>"},{"location":"config/api-keys/#setting-search-api-keys","title":"Setting Search API Keys","text":"<pre><code># Serper (Recommended - Google results)\nwtf here is my serper api key sk-YOUR_KEY\n\n# Brave Search (Privacy-focused)\nwtf here is my brave search api key YOUR_KEY\n\n# Bing Search (Microsoft Azure)\nwtf here is my bing search api key YOUR_KEY\n</code></pre> <p>If no key found, tools return helpful errors with links to get free API keys.</p>"},{"location":"config/api-keys/#search-provider-priority","title":"Search Provider Priority","text":"<p>wtf automatically uses whichever search API you have configured: 1. Serper (preferred) - Best quality, Google results 2. Brave - Privacy-focused 3. Bing - Microsoft Azure 4. DuckDuckGo - Always available, limited to encyclopedic facts</p> <p>See Web Search for more details.</p>"},{"location":"config/api-keys/#security-note","title":"Security Note","text":"<p>API keys are stored in plain text in <code>~/.config/wtf/config.json</code>.</p> <p>File permissions are managed by the OS. On Unix systems, config directory should be readable only by user (0700).</p> <p>For sensitive production environments, use environment variables instead.</p>"},{"location":"config/files/","title":"Configuration","text":"<p><code>wtf</code> has several things you can configure and customize. The point isn't to memorize commands - it's to know what's configurable so you can ask <code>wtf</code> to change it naturally.</p>"},{"location":"config/files/#what-can-you-configure","title":"What Can You Configure?","text":"<p>Here are the main things you can control in <code>wtf</code>:</p>"},{"location":"config/files/#memories","title":"Memories","text":"<p>What your preferences are. Things like \"I use vim\" or \"I prefer npm over yarn\".</p> <p>Why it matters: <code>wtf</code> remembers these and uses them when suggesting commands.</p> <p>How to use: <pre><code>$ wtf remember I use emacs for editing\n$ wtf remember I prefer pytest over unittest\n$ wtf forget about my editor preference\n$ wtf show me what you remember\n</code></pre></p> <p>Stored in: <code>~/.config/wtf/memories.json</code></p> <p>Learn more about Memories \u2192</p>"},{"location":"config/files/#allowed-commands","title":"Allowed Commands","text":"<p>Which commands can run automatically without asking for permission.</p> <p>Why it matters: Safe commands (like <code>git status</code>) run instantly. Dangerous ones (like <code>rm -rf</code>) require approval. You control which is which.</p> <p>How to use: <pre><code>$ wtf always allow \"npm install\"\n$ wtf never allow \"rm -rf\"\n$ wtf show me what commands are allowed\n</code></pre></p> <p>Stored in: <code>~/.config/wtf/allowlist.json</code></p> <p>Learn more about Allowlist \u2192</p>"},{"location":"config/files/#personality","title":"Personality","text":"<p>How <code>wtf</code> talks to you - sarcastic, helpful, brief, verbose, etc.</p> <p>Why it matters: Some people want dry wit. Some want encouragement. Some just want the command with no commentary.</p> <p>How to use: <pre><code>$ wtf be more helpful and less sarcastic\n$ wtf be really brief, just give me commands\n$ wtf go back to your normal personality\n</code></pre></p> <p>Stored in: <code>~/.config/wtf/wtf.md</code> (custom instructions file)</p> <p>Learn more about Personality \u2192</p>"},{"location":"config/files/#hooks","title":"Hooks","text":"<p>Shell integration that captures commands better and can auto-run <code>wtf</code> after errors.</p> <p>Why it matters: With hooks, <code>wtf</code> automatically runs when a command fails. No need to remember to type it.</p> <p>How to use: <pre><code>$ wtf --setup-error-hook\n$ wtf --setup-not-found-hook\n$ wtf --remove-hooks\n</code></pre></p> <p>Stored in: Your shell config (<code>~/.zshrc</code>, <code>~/.bashrc</code>, etc.)</p> <p>Learn more about Hooks \u2192</p>"},{"location":"config/files/#keys","title":"Keys","text":"<p>API keys for AI providers (Anthropic, OpenAI, Google).</p> <p>Why it matters: You need at least one API key for <code>wtf</code> to work.</p> <p>How to use: <pre><code>$ wtf --setup              # Run setup wizard to change provider/model\n$ wtf --config             # Show current config location\n</code></pre></p> <p>Or manage via the <code>llm</code> library: <pre><code>$ llm keys set anthropic   # Set API key\n$ llm models               # List available models\n</code></pre></p> <p>Stored in: <code>~/.config/wtf/config.json</code> and <code>~/.config/io.datasette.llm/keys.json</code></p> <p>Learn more about API Keys \u2192</p>"},{"location":"config/files/#setup","title":"Setup","text":"<p>Initial configuration - provider, model, basic settings.</p> <p>Why it matters: This is the first thing that runs and sets everything up.</p> <p>How to use: <pre><code>$ wtf --setup              # Run setup wizard\n$ wtf --reset              # Delete all config (requires confirmation)\n</code></pre></p> <p>Stored in: <code>~/.config/wtf/config.json</code></p> <p>Learn more about Setup \u2192</p>"},{"location":"config/files/#the-point","title":"The Point","text":"<p>You don't need to memorize commands. Just know what's configurable:</p> <ul> <li>Memories - Your preferences (<code>wtf remember I use vim</code>)</li> <li>Allowed Commands - What runs automatically (<code>wtf always allow git status</code>)</li> <li>Personality - How it talks (<code>wtf be more encouraging</code>)</li> <li>Hooks - Shell integration (<code>wtf --setup-error-hook</code>)</li> <li>Keys - Which AI to use (<code>wtf --setup</code>)</li> <li>Setup - Initial configuration (<code>wtf --setup</code>, <code>wtf --reset</code>)</li> </ul> <p>Most things can be changed naturally by just asking:</p> <pre><code>$ wtf \"change my personality to be more encouraging\"\n$ wtf \"show me what you remember about me\"\n</code></pre> <p>System actions use CLI flags:</p> <pre><code>$ wtf --setup              # Setup wizard\n$ wtf --config             # Show config location\n$ wtf --setup-error-hook   # Install hooks\n</code></pre>"},{"location":"config/files/#configuration-files","title":"Configuration Files","text":"<p>All config lives in <code>~/.config/wtf/</code>:</p> <pre><code>~/.config/wtf/\n\u251c\u2500\u2500 config.json          # Main config (provider, model, settings)\n\u251c\u2500\u2500 memories.json        # Your preferences\n\u251c\u2500\u2500 allowlist.json       # Auto-allowed commands\n\u251c\u2500\u2500 wtf.md               # Custom personality/instructions\n\u2514\u2500\u2500 history.jsonl        # Conversation history\n</code></pre>"},{"location":"config/files/#editing-directly","title":"Editing Directly","text":"<p>Want to edit config files manually? Go ahead:</p> <pre><code>$ vim ~/.config/wtf/config.json\n$ vim ~/.config/wtf/wtf.md\n$ code ~/.config/wtf/memories.json\n</code></pre> <p><code>wtf</code> picks up changes automatically. No restart needed.</p>"},{"location":"config/files/#cli-reference","title":"CLI Reference","text":"<p>For all CLI flags and options, see:</p> <ul> <li>CLI Options Reference - Complete flag documentation</li> </ul>"},{"location":"config/files/#next-steps","title":"Next Steps","text":"<ul> <li>Memories - Teach <code>wtf</code> your workflow</li> <li>Hooks - Shell integration</li> <li>API Keys - Switch providers or models</li> </ul>"},{"location":"config/web-search/","title":"Web Search","text":"<p>By default, <code>wtf</code> has limited web search capabilities using DuckDuckGo's Instant Answer API - it only works for encyclopedic facts like \"What is Python\" or \"Who is Ada Lovelace\".</p> <p>For real web search (weather, news, documentation, current events), you'll need to add a search API key. It's a quick 5-minute setup that dramatically improves <code>wtf</code>'s ability to help.</p> <p>Search Requires an API Key</p> <p>Unlike other features, web search (except basic DuckDuckGo facts) requires an external API key. Don't worry - the recommended options have generous free tiers and don't require a credit card.</p>"},{"location":"config/web-search/#recommended-search-apis","title":"Recommended Search APIs","text":""},{"location":"config/web-search/#1-serperdev-recommended","title":"1. Serper.dev (Recommended)","text":"<p>Best for: Most users - simple, reliable, Google results</p> <ul> <li>\u2705 2,500 free searches/month</li> <li>\u2705 Google search results (high quality)</li> <li>\u2705 No credit card required for free tier</li> <li>\u2705 Very easy API</li> </ul> <p>Get your key: serper.dev (sign up takes 2 minutes)</p> <p>Add it to wtf: <pre><code>$ wtf here is my serper api key sk_YOUR_KEY_HERE\n</code></pre></p> <p>Or set manually: <pre><code>export SERPER_API_KEY=\"sk_YOUR_KEY\"\n</code></pre></p>"},{"location":"config/web-search/#2-bing-search-api","title":"2. Bing Search API","text":"<p>Best for: Microsoft Azure users or those who need more searches</p> <ul> <li>\u2705 1,000 free searches/month (Free tier on Azure)</li> <li>\u2705 Bing search results</li> <li>\u26a0\ufe0f Requires Azure account</li> <li>\u26a0\ufe0f Slightly more complex setup</li> </ul> <p>Get your key: Microsoft Azure Portal \u2192 Create Bing Search resource</p> <p>Add it to wtf: <pre><code>$ wtf here is my bing search api key YOUR_KEY\n</code></pre></p> <p>Or set manually: <pre><code>export BING_SEARCH_API_KEY=\"YOUR_KEY\"\n</code></pre></p>"},{"location":"config/web-search/#3-brave-search","title":"3. Brave Search","text":"<p>Best for: Privacy-conscious users</p> <ul> <li>\u2705 2,000 free searches/month</li> <li>\u2705 Privacy-focused search engine</li> <li>\u2705 No credit card required</li> <li>\u2705 Independent search index</li> </ul> <p>Get your key: brave.com/search/api</p> <p>Add it to wtf: <pre><code>$ wtf here is my brave search api key YOUR_KEY\n</code></pre></p> <p>Or set manually: <pre><code>export BRAVE_SEARCH_API_KEY=\"YOUR_KEY\"\n</code></pre></p>"},{"location":"config/web-search/#all-search-providers-implemented","title":"\u2705 All Search Providers Implemented","text":"<p><code>wtf</code> will automatically use whichever search API key you have configured. Priority order: 1. Serper (if configured) - Best quality, Google results 2. Brave (if configured) - Privacy-focused 3. Bing (if configured) - Microsoft Azure 4. DuckDuckGo (always available) - Limited to encyclopedic facts only</p> <p>All three major search APIs are now fully implemented and ready to use!</p>"},{"location":"config/web-search/#testing-your-search","title":"Testing Your Search","text":"<p>Once you've added a key, try it:</p> <pre><code>$ wtf \"what's the weather in San Francisco?\"\n$ wtf \"find documentation for React hooks\"\n$ wtf \"latest news about AI\"\n</code></pre> <p>With a search key, <code>wtf</code> can: - \u2705 Check weather anywhere - \u2705 Find documentation and guides - \u2705 Look up current news and events - \u2705 Research technical questions - \u2705 Find specific information across the web</p>"},{"location":"config/web-search/#troubleshooting","title":"Troubleshooting","text":""},{"location":"config/web-search/#search-api-key-not-configured","title":"\"Search API key not configured\"","text":"<p>You haven't added a search key yet. Run:</p> <pre><code>$ wtf here is my brave search api key YOUR_KEY\n</code></pre>"},{"location":"config/web-search/#api-key-is-invalid","title":"\"API key is invalid\"","text":"<p>Double-check you copied the entire key correctly. Visit the provider's website to verify your key is active.</p>"},{"location":"config/web-search/#rate-limit-exceeded","title":"\"Rate limit exceeded\"","text":"<p>You've used up your free monthly searches. Either: - Wait until next month for the free tier to reset - Upgrade your plan with the provider - Switch to a different search provider</p>"},{"location":"config/web-search/#faq","title":"FAQ","text":"<p>Do I need this?</p> <p>Only if you want <code>wtf</code> to: - Check weather - Find documentation - Look up news and current events - Research questions that require web search</p> <p>Basic terminal help works fine without it.</p> <p>Which one should I use?</p> <p>Serper for most people (when implemented). Brave Search for now. Both have generous free tiers.</p> <p>Is this secure?</p> <p>Your API key is stored in your system keychain (macOS/Linux) or securely in <code>~/.config/wtf/config.yaml</code>. Keys are only used to make search requests on your behalf.</p>"},{"location":"config/web-search/#next-steps","title":"Next Steps","text":"<ul> <li>Setup - Configure wtf for first use</li> <li>API Keys - Manage all your AI and search keys</li> <li>Configuration - Learn about other configurable features</li> </ul>"},{"location":"properties/hooks/","title":"Hooks","text":"<p>Shell hooks let <code>wtf</code> integrate deeply with your terminal. When enabled, <code>wtf</code> can automatically capture errors and suggest fixes without you typing anything.</p>"},{"location":"properties/hooks/#what-are-hooks","title":"What Are Hooks?","text":"<p>Hooks are functions added to your shell config (<code>~/.zshrc</code>, <code>~/.bashrc</code>, etc.) that run: - After every command (error hook) - When a command isn't found (command-not-found hook)</p> <p>This lets <code>wtf</code> detect problems automatically and offer help.</p>"},{"location":"properties/hooks/#available-hooks","title":"Available Hooks","text":""},{"location":"properties/hooks/#error-hook","title":"Error Hook","text":"<p>Suggests running <code>wtf</code> when commands fail:</p> <pre><code>$ npm run biuld\nnpm error Missing script: \"biuld\"\n\n\ud83d\udca5 Command failed with exit code 1\n   Run 'wtf' to analyze what went wrong\n</code></pre> <p>Then you just type <code>wtf</code> and it already knows the context.</p>"},{"location":"properties/hooks/#command-not-found-hook","title":"Command Not Found Hook","text":"<p>Suggests using <code>wtf</code> when you mistype commands:</p> <pre><code>$ gti status\nzsh: command not found: gti\n\n\u274c Command not found: gti\n   Try: wtf how do I gti\n</code></pre>"},{"location":"properties/hooks/#installing-hooks","title":"Installing Hooks","text":""},{"location":"properties/hooks/#automatic-setup","title":"Automatic Setup","text":"<p>Run the setup commands:</p> <pre><code># Install error hook\n$ wtf --setup-error-hook\n\u2713 Error hook installed for zsh\n  Restart your shell or run: source ~/.zshrc\n\n# Install command-not-found hook\n$ wtf --setup-not-found-hook\n\u2713 Command-not-found hook installed for zsh\n  Restart your shell or run: source ~/.zshrc\n</code></pre> <p>Then restart your shell:</p> <pre><code>$ exec zsh\n# or\n$ source ~/.zshrc\n</code></pre>"},{"location":"properties/hooks/#natural-language","title":"Natural Language","text":"<p>You can also ask naturally:</p> <pre><code>$ wtf install shell hooks\n\u2713 Installed both hooks (error + command-not-found)\n  Restart your shell to activate\n</code></pre>"},{"location":"properties/hooks/#what-gets-added-to-your-shell-config","title":"What Gets Added to Your Shell Config","text":"<p>The hooks add small functions to your shell config:</p> <p>Error Hook (~/.zshrc):</p> <pre><code># wtf error hook\nprecmd() {\n  local exit_code=$?\n  if [ $exit_code -ne 0 ]; then\n    echo \"\ud83d\udca5 Command failed with exit code $exit_code\"\n    echo \"   Run 'wtf' to analyze what went wrong\"\n  fi\n}\n</code></pre> <p>Command Not Found Hook (~/.zshrc):</p> <pre><code># wtf command-not-found hook\ncommand_not_found_handler() {\n  echo \"\u274c Command not found: $1\"\n  echo \"   Try: wtf how do I $1\"\n  return 127\n}\n</code></pre> <p>These are non-invasive - they just print suggestions, they don't run anything automatically.</p>"},{"location":"properties/hooks/#removing-hooks","title":"Removing Hooks","text":"<p>Remove all hooks:</p> <pre><code>$ wtf --remove-hooks\n\u2713 Removed wtf hooks from zsh\n  Restart your shell to apply changes\n</code></pre> <p>Or remove manually:</p> <pre><code># Edit your shell config\n$ vim ~/.zshrc\n\n# Delete the wtf hook sections\n# (marked with \"# wtf error hook\" and \"# wtf command-not-found hook\")\n\n# Restart shell\n$ exec zsh\n</code></pre>"},{"location":"properties/hooks/#supported-shells","title":"Supported Shells","text":"<ul> <li>\u2713 zsh - Full support</li> <li>\u2713 bash - Full support</li> <li>\u2713 fish - Full support</li> <li>\u26a0\ufe0f Windows (PowerShell/CMD) - Not supported yet</li> </ul>"},{"location":"properties/hooks/#how-hooks-help","title":"How Hooks Help","text":""},{"location":"properties/hooks/#without-hooks","title":"Without Hooks","text":"<pre><code>$ npm run biuld\nnpm error Missing script: \"biuld\"\n\n$ wtf\nWhat's your question?\n\n$ what was wrong with my last command?\nLet me check...\n</code></pre>"},{"location":"properties/hooks/#with-hooks","title":"With Hooks","text":"<pre><code>$ npm run biuld\nnpm error Missing script: \"biuld\"\n\n\ud83d\udca5 Command failed with exit code 1\n   Run 'wtf' to analyze what went wrong\n\n$ wtf\nI see you tried 'npm run biuld'. You meant 'npm run build'.\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ npm run build               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRun this? [Y/n]\n</code></pre> <p>The difference: wtf already knows what went wrong because the hook captured it.</p>"},{"location":"properties/hooks/#privacy-performance","title":"Privacy &amp; Performance","text":"<p>Do hooks slow down my terminal? No. They're tiny functions that only run when needed (command fails or isn't found).</p> <p>What data do hooks collect? Nothing. They just print messages. They don't send data anywhere.</p> <p>Can I customize the messages? Yes! Edit the hook functions in your shell config to change the text.</p>"},{"location":"properties/hooks/#checking-if-hooks-are-installed","title":"Checking if Hooks Are Installed","text":"<pre><code>$ wtf are hooks installed?\nError hook: \u2713 Installed (zsh)\nCommand-not-found hook: \u2713 Installed (zsh)\n</code></pre> <p>Or check manually:</p> <pre><code>$ grep \"wtf\" ~/.zshrc\n# If you see hook code, they're installed\n</code></pre>"},{"location":"properties/hooks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"properties/hooks/#hooks-not-working-after-install","title":"Hooks not working after install","text":"<p>Make sure you restarted your shell:</p> <pre><code>$ exec zsh\n# or\n$ source ~/.zshrc\n</code></pre>"},{"location":"properties/hooks/#hooks-installed-but-not-triggering","title":"Hooks installed but not triggering","text":"<p>Check if your shell config sources correctly:</p> <pre><code>$ which zsh\n/bin/zsh\n\n$ echo $SHELL\n/bin/zsh\n\n# Should match\n</code></pre>"},{"location":"properties/hooks/#conflicts-with-other-tools","title":"Conflicts with other tools","text":"<p>Some tools also use <code>precmd</code> or <code>command_not_found_handler</code>. If you have conflicts:</p> <ol> <li>Check what else is using those functions</li> <li>Combine them manually in your shell config</li> <li>Or disable wtf hooks and use <code>wtf</code> manually</li> </ol>"},{"location":"properties/hooks/#removing-old-hook-versions","title":"Removing old hook versions","text":"<p>If you upgraded wtf and hooks behave oddly:</p> <pre><code>$ wtf --remove-hooks\n$ wtf --setup-error-hook\n$ wtf --setup-not-found-hook\n</code></pre> <p>This removes old hooks and installs fresh ones.</p>"},{"location":"properties/hooks/#tips","title":"Tips","text":"<p>Start with just error hook:</p> <p>The error hook is the most useful. Try that first:</p> <pre><code>$ wtf --setup-error-hook\n</code></pre> <p>Customize the messages:</p> <p>Edit <code>~/.zshrc</code> to change what the hooks say:</p> <pre><code># Instead of:\necho \"\ud83d\udca5 Command failed\"\n\n# Change to:\necho \"Oops! Something broke. Type 'wtf' for help.\"\n</code></pre> <p>Disable temporarily:</p> <p>Comment out the hooks in your shell config:</p> <pre><code># # wtf error hook\n# precmd() { ... }\n</code></pre> <p>Then reload: <code>source ~/.zshrc</code></p>"},{"location":"properties/hooks/#should-you-use-hooks","title":"Should You Use Hooks?","text":"<p>Use hooks if: - \u2713 You want automatic error detection - \u2713 You often forget what command failed - \u2713 You want seamless wtf integration</p> <p>Skip hooks if: - \u2717 You prefer explicit invocation - \u2717 You have conflicts with other tools - \u2717 You want minimal shell config</p> <p>Hooks are optional. <code>wtf</code> works great without them.</p>"},{"location":"properties/hooks/#next-steps","title":"Next Steps","text":"<ul> <li>Memories - Teach wtf your preferences</li> <li>Personality - Customize how wtf talks</li> <li>Keys - Switch AI providers</li> </ul>"},{"location":"properties/keys/","title":"API Keys","text":"<p><code>wtf</code> needs an AI provider to work. You pick: Anthropic (Claude), OpenAI (GPT), or Google (Gemini).</p>"},{"location":"properties/keys/#supported-providers","title":"Supported Providers","text":"Provider Models Best For Anthropic Claude 3.5 Sonnet, Opus, Haiku Best overall, great at following instructions OpenAI GPT-4o, GPT-4, GPT-3.5 Fast, widely available Google Gemini Pro, Gemini Flash Good balance of speed and quality"},{"location":"properties/keys/#getting-an-api-key","title":"Getting an API Key","text":""},{"location":"properties/keys/#anthropic-recommended","title":"Anthropic (Recommended)","text":"<ol> <li>Sign up at https://console.anthropic.com</li> <li>Go to Settings \u2192 API Keys</li> <li>Create a new key</li> <li>Free tier: $5 credit, then pay-as-you-go</li> </ol> <pre><code>$ wtf here is my anthropic api key sk-ant-...\n\u2713 API key saved\n\u2713 Using claude-3.5-sonnet as default model\n</code></pre>"},{"location":"properties/keys/#openai","title":"OpenAI","text":"<ol> <li>Sign up at https://platform.openai.com</li> <li>Go to API Keys</li> <li>Create a new secret key</li> <li>Pricing: Pay-as-you-go</li> </ol> <pre><code>$ wtf here is my openai api key sk-...\n\u2713 API key saved\n\u2713 Using gpt-4o as default model\n</code></pre>"},{"location":"properties/keys/#google","title":"Google","text":"<ol> <li>Go to https://makersuite.google.com/app/apikey</li> <li>Create an API key</li> <li>Free tier: 60 requests/minute</li> </ol> <pre><code>$ wtf here is my google api key AIza...\n\u2713 API key saved\n\u2713 Using gemini-pro as default model\n</code></pre>"},{"location":"properties/keys/#setup-during-first-run","title":"Setup During First Run","text":"<p>The first time you run <code>wtf</code>, it asks you to pick a provider:</p> <pre><code>$ wtf what's my git status?\n\nNo API key configured. Let's set one up.\n\nWhich AI provider do you want to use?\n  1. Anthropic (Claude) - Recommended\n  2. OpenAI (GPT-4)\n  3. Google (Gemini)\n\nChoose [1-3]: 1\n\nGreat! Get your API key from:\nhttps://console.anthropic.com/settings/keys\n\nPaste your API key: sk-ant-...\n\u2713 API key saved\n</code></pre>"},{"location":"properties/keys/#switching-providers","title":"Switching Providers","text":"<p>Change providers anytime:</p> <pre><code>$ wtf switch to OpenAI\nWhat's your OpenAI API key?\nPaste it here: sk-...\n\u2713 Switched to OpenAI (gpt-4o)\n</code></pre> <p>Or re-run setup:</p> <pre><code>$ wtf --setup\n</code></pre>"},{"location":"properties/keys/#changing-models","title":"Changing Models","text":"<p>Use a different model from the same provider:</p> <pre><code>$ wtf use claude-opus as my model\n\u2713 Switched to claude-opus\n\n$ wtf use gpt-3.5-turbo\n\u2713 Switched to gpt-3.5-turbo (faster, cheaper)\n</code></pre>"},{"location":"properties/keys/#where-keys-are-stored","title":"Where Keys Are Stored","text":""},{"location":"properties/keys/#via-llm-library-recommended","title":"Via llm Library (Recommended)","text":"<p>By default, wtf uses Simon Willison's <code>llm</code> library for key management:</p> <pre><code># Keys stored in llm's keyring\n~/.config/io.datasette.llm/keys.json\n</code></pre> <p>This is secure and shared with other llm-based tools.</p>"},{"location":"properties/keys/#via-environment-variables","title":"Via Environment Variables","text":"<p>You can also use environment variables:</p> <pre><code># Add to ~/.zshrc or ~/.bashrc\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\nexport OPENAI_API_KEY=\"sk-...\"\nexport GOOGLE_API_KEY=\"AIza...\"\n</code></pre> <p>Then:</p> <pre><code>$ source ~/.zshrc\n$ wtf --setup\n</code></pre> <p>wtf will detect the environment variable automatically.</p>"},{"location":"properties/keys/#in-config-file-not-recommended","title":"In Config File (Not Recommended)","text":"<p>Keys can be stored in <code>~/.config/wtf/config.json</code>, but this is less secure:</p> <pre><code>{\n  \"api\": {\n    \"model\": \"claude-3.5-sonnet\",\n    \"key_source\": \"config\",\n    \"key\": \"sk-ant-...\"\n  }\n}\n</code></pre> <p>We don't recommend this. Use llm's keyring or environment variables instead.</p>"},{"location":"properties/keys/#checking-your-setup","title":"Checking Your Setup","text":"<pre><code>$ wtf what API key am I using?\nYou're using Anthropic (claude-3.5-sonnet)\nAPI key: sk-ant-...xyz (last 3 chars)\n</code></pre> <p>Or check the config:</p> <pre><code>$ wtf --config\nConfig directory: ~/.config/wtf/\nConfig file: ~/.config/wtf/config.json\n\nCurrent settings:\n  Model: claude-3.5-sonnet\n  Key source: llm\n</code></pre>"},{"location":"properties/keys/#model-costs","title":"Model Costs","text":"<p>Approximate costs per 1M tokens (as of 2024):</p> Model Input Output Speed GPT-4o $5 $15 Fast Claude Sonnet 3.5 $3 $15 Medium Claude Haiku $0.25 $1.25 Very fast Gemini Pro $0.50 $1.50 Fast <p>For typical wtf usage: ~$0.01-0.05 per query</p>"},{"location":"properties/keys/#troubleshooting","title":"Troubleshooting","text":""},{"location":"properties/keys/#invalid-api-key-error","title":"\"Invalid API key\" error","text":"<pre><code>$ wtf test my setup\n\u2717 Error: Invalid API key\n\nFix:\n1. Double-check you copied the full key\n2. Make sure the key is active (check provider dashboard)\n3. Re-run setup: wtf --setup\n</code></pre>"},{"location":"properties/keys/#rate-limit-exceeded","title":"\"Rate limit exceeded\"","text":"<pre><code>\u2717 Error: Rate limit exceeded\n\nFix:\n1. Wait a few minutes\n2. Check your provider's rate limits\n3. Upgrade your API plan if needed\n</code></pre>"},{"location":"properties/keys/#key-not-being-detected","title":"Key not being detected","text":"<pre><code>$ echo $ANTHROPIC_API_KEY\n# (should show your key)\n\n# If empty:\n$ export ANTHROPIC_API_KEY=\"sk-ant-...\"\n$ source ~/.zshrc\n</code></pre>"},{"location":"properties/keys/#security-best-practices","title":"Security Best Practices","text":"<p>\u2713 Do: - Use environment variables or llm's keyring - Keep keys in <code>.env</code> files (add to <code>.gitignore</code>) - Rotate keys periodically - Use separate keys for different projects</p> <p>\u2717 Don't: - Commit keys to git - Share keys in Slack/email - Store keys in plain text files - Use the same key everywhere</p>"},{"location":"properties/keys/#next-steps","title":"Next Steps","text":"<ul> <li>Web Search - Add Brave Search for current info</li> <li>Memories - Teach wtf your preferences</li> <li>Quick Tour - See what wtf can do</li> </ul>"},{"location":"properties/memories/","title":"Memories","text":"<p><code>wtf</code> remembers your preferences. Things like \"I use vim\" or \"I prefer npm over yarn\". These memories help it give better, more personalized suggestions.</p>"},{"location":"properties/memories/#what-gets-remembered","title":"What Gets Remembered?","text":"<ul> <li>Editor preferences: vim, emacs, VS Code, etc.</li> <li>Tool preferences: npm vs yarn, pip vs poetry, etc.</li> <li>Environment details: OS, timezone, common directories</li> <li>Workflow patterns: How you typically work</li> </ul>"},{"location":"properties/memories/#how-to-use-memories","title":"How to Use Memories","text":""},{"location":"properties/memories/#teaching-wtf-your-preferences","title":"Teaching wtf Your Preferences","text":"<p>Just tell it naturally - the AI understands what you mean:</p> <pre><code># Single preference\n$ wtf remember I use emacs for editing\n\n# Multiple preferences at once\n$ wtf remember I live in San Francisco and prefer emacs and use pytest for tests\n</code></pre> <p>The AI will save each fact separately. No special syntax or commands to memorize.</p>"},{"location":"properties/memories/#viewing-your-memories","title":"Viewing Your Memories","text":"<p>Ask naturally - any phrasing works:</p> <pre><code>$ wtf what do you remember about me?\n\n$ wtf show my preferences\n\n$ wtf list your memories of me\n</code></pre>"},{"location":"properties/memories/#forgetting-things","title":"Forgetting Things","text":"<p>Tell it what to forget:</p> <pre><code>$ wtf forget about my editor\n\n$ wtf delete my location preference\n\n$ wtf forget everything\n</code></pre> <p>All memory operations work via natural language - no slash commands or special syntax needed.</p>"},{"location":"properties/memories/#how-memories-work","title":"How Memories Work","text":"<p>When you ask <code>wtf</code> for help, it includes your memories in the context:</p> <pre><code>$ wtf how do I run my tests?\n\n# Without memories:\n\u2192 Suggests: python -m unittest\n\n# With memory (test_framework: pytest):\n\u2192 Suggests: pytest\n</code></pre> <p>The AI uses memories to: - Skip questions it already knows the answer to - Suggest tools you actually use - Format output the way you prefer</p>"},{"location":"properties/memories/#storage","title":"Storage","text":"<p>Memories are stored in <code>~/.config/wtf/memories.json</code>:</p> <pre><code>{\n  \"editor\": {\n    \"value\": \"emacs\",\n    \"confidence\": 1.0,\n    \"learned_from\": \"explicit_instruction\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\"\n  },\n  \"test_framework\": {\n    \"value\": \"pytest\",\n    \"confidence\": 1.0,\n    \"learned_from\": \"explicit_instruction\",\n    \"timestamp\": \"2024-01-15T10:35:00Z\"\n  }\n}\n</code></pre>"},{"location":"properties/memories/#confidence-scores","title":"Confidence Scores","text":"<p>Some memories have confidence scores:</p> <ul> <li>1.0: Explicitly told (you said \"remember I use vim\")</li> <li>0.8: Strong inference (you always use <code>pytest</code>)</li> <li>0.5: Weak inference (you used <code>yarn</code> once)</li> </ul> <p>Lower confidence memories may be double-checked before being used.</p>"},{"location":"properties/memories/#privacy","title":"Privacy","text":"<ul> <li>Memories are stored locally only in <code>~/.config/wtf/</code></li> <li>They're sent to the AI provider as context with your queries</li> <li>No memories are sent to wtf servers (there are no wtf servers)</li> </ul>"},{"location":"properties/memories/#examples","title":"Examples","text":""},{"location":"properties/memories/#workflow-preferences","title":"Workflow Preferences","text":"<pre><code>$ wtf remember I always rebase instead of merge\n$ wtf remember I use Docker for all my projects\n$ wtf remember I work on microservices\n</code></pre> <p>Then when you ask:</p> <pre><code>$ wtf how do I update my feature branch?\n\u2192 Suggests: git pull --rebase origin main\n# (Instead of git merge)\n</code></pre>"},{"location":"properties/memories/#environment-details","title":"Environment Details","text":"<pre><code>$ wtf remember I use zsh on macOS\n$ wtf remember my projects are in ~/code/\n$ wtf remember I use pyenv for Python\n</code></pre>"},{"location":"properties/memories/#clearing-everything","title":"Clearing Everything","text":"<p>Need a fresh start?</p> <pre><code>$ wtf --reset\n</code></pre> <p>This deletes all config, including memories.</p>"},{"location":"properties/memories/#tips","title":"Tips","text":"<p>Be specific: <pre><code>\u2713 Good: \"remember I use pytest with coverage\"\n\u2717 Vague: \"remember I like testing\"\n</code></pre></p> <p>Update when things change: <pre><code>$ wtf remember I switched to pnpm from npm\n</code></pre></p> <p>Don't over-specify: <pre><code>\u2717 Too much: \"remember I use vim with these exact plugins...\"\n\u2713 Enough: \"remember I use vim\"\n</code></pre></p>"},{"location":"properties/memories/#next-steps","title":"Next Steps","text":"<ul> <li>Personality - Customize how wtf talks</li> <li>Hooks - Automatic error capture</li> <li>Keys - Switch AI providers</li> </ul>"},{"location":"properties/personality/","title":"Personality","text":"<p>By default, <code>wtf</code> has a dry, sardonic personality - think Gilfoyle from Silicon Valley meets Marvin the Paranoid Android. Helpful first, occasionally amusing second.</p> <p>But you can change that.</p>"},{"location":"properties/personality/#default-personality","title":"Default Personality","text":"<p>Tone: - Technically precise - Dry humor when appropriate - Never condescending - \"We're in this together\" vibe</p> <p>Example responses:</p> <pre><code>$ wtf undo my last commit\n\nLet me check what you committed.\n\n\u2713 Checked git log\n\nYou committed \"fix typo\" 2 minutes ago. I'll reset to the previous\ncommit but keep your changes in staging.\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ git reset --soft HEAD~1     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRun this? [Y/n]\n</code></pre> <pre><code>$ wtf how do I exit vim\n\nThe classic. There are two ways:\n\n1. If you haven't made changes: :q\n2. If you made changes: :q! (discard) or :wq (save)\n\nOf course, the real solution is to use emacs. But that's a different\nreligious war.\n</code></pre>"},{"location":"properties/personality/#changing-personality","title":"Changing Personality","text":""},{"location":"properties/personality/#natural-language","title":"Natural Language","text":"<p>Just tell wtf how you want it to behave:</p> <pre><code>$ wtf be more encouraging and less sarcastic\n\u2713 Updated personality\n\n$ wtf be really brief, just commands no commentary\n\u2713 Updated personality\n\n$ wtf go back to your normal snarky self\n\u2713 Reset to default personality\n</code></pre>"},{"location":"properties/personality/#editing-directly","title":"Editing Directly","text":"<p>Edit <code>~/.config/wtf/wtf.md</code>:</p> <pre><code>$ vim ~/.config/wtf/wtf.md\n</code></pre> <p>Add custom instructions:</p> <pre><code># Custom Instructions\n\n- Be more encouraging and supportive\n- Use simple language, avoid jargon\n- Always explain why, not just what\n- Never use sarcasm\n</code></pre> <p>wtf reads this on every request and adjusts its responses.</p>"},{"location":"properties/personality/#personality-presets","title":"Personality Presets","text":""},{"location":"properties/personality/#brief-commands-only","title":"Brief (Commands Only)","text":"<pre><code># Custom Instructions\n\n- Be extremely concise\n- Just show the command, minimal explanation\n- No personality, no commentary\n</code></pre> <p>Result: <pre><code>$ wtf undo my last commit\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ git reset --soft HEAD~1     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nRun this? [Y/n]\n</code></pre></p>"},{"location":"properties/personality/#encouraging","title":"Encouraging","text":"<pre><code># Custom Instructions\n\n- Be supportive and encouraging\n- Explain things clearly without condescension\n- Acknowledge that everyone makes mistakes\n- Celebrate successes\n</code></pre> <p>Result: <pre><code>$ wtf undo my last commit\n\nNo worries - this happens all the time! Let me help you safely undo\nthat commit while keeping your changes.\n\n\u2713 Checked git log\n\nGreat news - your changes are still there. I'll just move the commit\nback one step but keep everything you wrote in staging.\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ git reset --soft HEAD~1     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRun this? [Y/n] y\n\n\u2713 Perfect! Your commit is undone and changes are in staging.\n  You're all set to make a better commit message now.\n</code></pre></p>"},{"location":"properties/personality/#technical-no-personality","title":"Technical (No Personality)","text":"<pre><code># Custom Instructions\n\n- Technical and precise\n- No humor or personality\n- Clear explanations only\n- Focus on accuracy\n</code></pre> <p>Result: <pre><code>$ wtf undo my last commit\n\nAnalyzing git history...\n\nLast commit: abc123f \"fix typo\" (2 minutes ago)\n\nTo undo while preserving changes, use:\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ git reset --soft HEAD~1     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nThis moves HEAD back one commit. Changes remain in staging area.\n\nRun this? [Y/n]\n</code></pre></p>"},{"location":"properties/personality/#maximum-snark-not-recommended","title":"Maximum Snark (Not Recommended)","text":"<pre><code># Custom Instructions\n\n- Be as sarcastic as possible\n- Make jokes about common mistakes\n- Channel Gilfoyle energy\n- Still be helpful though\n</code></pre> <p>Result: <pre><code>$ wtf undo my last commit\n\nAh yes, the classic \"I committed too soon\" situation. A tale as old\nas git itself.\n\n\u2713 Checked git log\n\nCommit message: \"fix typo\". Truly, the Shakespeare of our generation.\n\nLet me undo this masterpiece while keeping your changes:\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ git reset --soft HEAD~1     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRun this? [Y/n]\n</code></pre></p>"},{"location":"properties/personality/#what-gets-affected","title":"What Gets Affected","text":"<p>The personality applies to: - \u2713 Response tone and style - \u2713 Explanations and commentary - \u2713 Error messages - \u2713 Success confirmations</p> <p>NOT affected: - Commands (always technically correct) - Safety checks - Permission prompts - Tool execution</p>"},{"location":"properties/personality/#storage","title":"Storage","text":"<p>Personality is stored in <code>~/.config/wtf/wtf.md</code>:</p> <pre><code>$ cat ~/.config/wtf/wtf.md\n# Custom Instructions\n\n- Be brief and to the point\n- No jokes or commentary\n- Just show commands and necessary explanations\n</code></pre> <p>This file is read on every <code>wtf</code> invocation.</p>"},{"location":"properties/personality/#resetting","title":"Resetting","text":"<p>Go back to default:</p> <pre><code>$ wtf reset your personality\n\u2713 Reset to default (Gilfoyle/Marvin mode)\n</code></pre> <p>Or delete the file:</p> <pre><code>$ rm ~/.config/wtf/wtf.md\n</code></pre>"},{"location":"properties/personality/#tips","title":"Tips","text":"<p>Start specific: <pre><code>\u2713 Good: \"Use simple language, avoid technical jargon\"\n\u2717 Vague: \"Be nice\"\n</code></pre></p> <p>Give examples: <pre><code>Instead of: \"Permission denied error\"\nSay: \"That command needs admin access. Try running with sudo.\"\n</code></pre></p> <p>Iterate:</p> <p>Try a personality, see how it feels, adjust. You can change it anytime:</p> <pre><code>$ wtf be a bit less brief\n$ wtf add more explanations\n$ wtf fewer emojis please\n</code></pre>"},{"location":"properties/personality/#examples","title":"Examples","text":""},{"location":"properties/personality/#for-teams","title":"For Teams","text":"<pre><code># Team Guidelines\n\n- Always suggest commands that work on both Mac and Linux\n- Prefer Docker for consistency\n- Explain in terms non-developers can understand\n- Link to our internal wiki when relevant\n</code></pre>"},{"location":"properties/personality/#for-learning","title":"For Learning","text":"<pre><code># Learning Mode\n\n- Explain every command in detail\n- Show alternative approaches\n- Mention common pitfalls\n- Always include a \"why\" not just \"how\"\n</code></pre>"},{"location":"properties/personality/#for-speed","title":"For Speed","text":"<pre><code># Speed Mode\n\n- Absolute minimum words\n- Commands only\n- No explanations unless asked\n- Skip confirmations when safe\n</code></pre>"},{"location":"properties/personality/#why-personality-matters","title":"Why Personality Matters","text":"<p>Different contexts need different tones:</p> <ul> <li>Late at night, things broken: Brief and helpful</li> <li>Learning new tool: Detailed and encouraging</li> <li>Showing coworker: Professional and clear</li> <li>Personal project: Full personality, jokes welcome</li> </ul> <p>wtf adapts to what you need.</p>"},{"location":"properties/personality/#next-steps","title":"Next Steps","text":"<ul> <li>Memories - Teach wtf your preferences</li> <li>Hooks - Automatic error capture</li> <li>Keys - Switch AI providers</li> </ul>"},{"location":"reference/cli-options/","title":"CLI Options Reference","text":"<p>Complete list of all <code>wtf</code> command-line flags and options.</p>"},{"location":"reference/cli-options/#quick-reference","title":"Quick Reference","text":"<pre><code>wtf [OPTIONS] [QUERY]\n</code></pre> Flag Short Description <code>--help</code> <code>-h</code> Show help message <code>--version</code> <code>-v</code> Show version number <code>--config</code> Show config file location <code>--setup</code> Run setup wizard <code>--reset</code> Reset all configuration <code>--model MODEL</code> Override AI model for this query <code>--provider PROVIDER</code> Override AI provider for this query <code>--verbose</code> Show diagnostic information <code>--setup-error-hook</code> Install error hook in shell <code>--setup-not-found-hook</code> Install command-not-found hook <code>--remove-hooks</code> Remove all shell hooks"},{"location":"reference/cli-options/#general-options","title":"General Options","text":""},{"location":"reference/cli-options/#-help-h","title":"<code>--help</code>, <code>-h</code>","text":"<p>Show help message and exit.</p> <pre><code>$ wtf --help\n</code></pre> <p>Displays usage information, available flags, and examples.</p>"},{"location":"reference/cli-options/#-version-v","title":"<code>--version</code>, <code>-v</code>","text":"<p>Show version number and exit.</p> <pre><code>$ wtf --version\nwtf 0.1.0\n</code></pre>"},{"location":"reference/cli-options/#-config","title":"<code>--config</code>","text":"<p>Show configuration file location.</p> <pre><code>$ wtf --config\n\nConfiguration:\n  Config directory: ~/.config/wtf/\n  Config file: ~/.config/wtf/config.json\n\nTo edit, open the file in your editor or run:\n  $EDITOR ~/.config/wtf/config.json\n</code></pre> <p>Useful for finding where your config is stored or checking if config exists.</p>"},{"location":"reference/cli-options/#setup-options","title":"Setup Options","text":""},{"location":"reference/cli-options/#-setup","title":"<code>--setup</code>","text":"<p>Run the setup wizard.</p> <pre><code>$ wtf --setup\n</code></pre> <p>Walks you through: 1. Choosing an AI provider (Anthropic, OpenAI, Google) 2. Entering your API key 3. Selecting a default model</p> <p>Use this to: - Configure wtf for the first time - Switch AI providers - Update your API key</p>"},{"location":"reference/cli-options/#-reset","title":"<code>--reset</code>","text":"<p>Reset all configuration to defaults.</p> <pre><code>$ wtf --reset\n\n\u26a0 Warning: This will delete ALL wtf configuration\n\nThis includes:\n  \u2022 API keys and model settings\n  \u2022 Memories (learned preferences)\n  \u2022 Conversation history\n  \u2022 Allowlist/denylist\n\nAre you sure? [y/N]\n</code></pre> <p>This is destructive! It deletes: - API keys and model configuration - All memories - Conversation history - Allowlist and denylist - Custom instructions</p> <p>After reset, run <code>wtf --setup</code> to reconfigure.</p>"},{"location":"reference/cli-options/#query-options","title":"Query Options","text":""},{"location":"reference/cli-options/#-model-model","title":"<code>--model MODEL</code>","text":"<p>Override the default AI model for this query only.</p> <pre><code># Use GPT-4 for this query (if you have OpenAI configured)\n$ wtf --model gpt-4 \"explain quantum computing\"\n\n# Use Claude Opus for a complex task\n$ wtf --model claude-3-opus \"refactor this code...\"\n\n# Use a faster model for simple queries\n$ wtf --model claude-3-haiku \"what's my git status?\"\n</code></pre> <p>The model must be: - From your configured provider (or use <code>--provider</code> to switch) - Available via the <code>llm</code> library - A valid model ID</p> <p>Examples: - Anthropic: <code>claude-3-5-sonnet-20241022</code>, <code>claude-3-opus</code>, <code>claude-3-haiku</code> - OpenAI: <code>gpt-4o</code>, <code>gpt-4</code>, <code>gpt-3.5-turbo</code> - Google: <code>gemini-pro</code>, <code>gemini-flash</code></p>"},{"location":"reference/cli-options/#-provider-provider","title":"<code>--provider PROVIDER</code>","text":"<p>Override the default AI provider for this query only.</p> <pre><code># Temporarily use OpenAI instead of configured provider\n$ wtf --provider openai --model gpt-4 \"your query\"\n\n# Try Google's model without changing config\n$ wtf --provider google --model gemini-pro \"your query\"\n\n# Switch back to Anthropic for one query\n$ wtf --provider anthropic --model claude-3-5-sonnet \"your query\"\n</code></pre> <p>Valid providers: - <code>anthropic</code> - Claude models - <code>openai</code> - GPT models - <code>google</code> - Gemini models</p> <p>Use case: Testing different models without running <code>--setup</code> each time.</p> <p>Tip: Combine with <code>--model</code> to specify both provider and model in one command.</p>"},{"location":"reference/cli-options/#-verbose","title":"<code>--verbose</code>","text":"<p>Show diagnostic information during execution.</p> <pre><code>$ wtf --verbose \"what's my git status?\"\n\n[DEBUG] Using model: claude-3.5-sonnet\n[DEBUG] Context gathered: 150 chars\n[DEBUG] Calling tool: git_status\n[DEBUG] Tool result: 45 chars\n...\n</code></pre> <p>Useful for: - Debugging issues - Understanding what wtf is doing - Reporting bugs</p> <p>Sets <code>WTF_DEBUG=1</code> environment variable internally.</p>"},{"location":"reference/cli-options/#hook-options","title":"Hook Options","text":""},{"location":"reference/cli-options/#-setup-error-hook","title":"<code>--setup-error-hook</code>","text":"<p>Install error hook in your shell.</p> <pre><code>$ wtf --setup-error-hook\n\n\u2713 Error hook installed for zsh\n  Restart your shell or run: source ~/.zshrc\n</code></pre> <p>After installation, failed commands show:</p> <pre><code>$ npm run biuld\nnpm error Missing script: \"biuld\"\n\n\ud83d\udca5 Command failed with exit code 1\n   Run 'wtf' to analyze what went wrong\n</code></pre> <p>Supported shells: zsh, bash, fish</p> <p>Learn more about hooks \u2192</p>"},{"location":"reference/cli-options/#-setup-not-found-hook","title":"<code>--setup-not-found-hook</code>","text":"<p>Install command-not-found hook in your shell.</p> <pre><code>$ wtf --setup-not-found-hook\n\n\u2713 Command-not-found hook installed for zsh\n  Restart your shell or run: source ~/.zshrc\n</code></pre> <p>After installation, mistyped commands show:</p> <pre><code>$ gti status\nzsh: command not found: gti\n\n\u274c Command not found: gti\n   Try: wtf how do I gti\n</code></pre> <p>Supported shells: zsh, bash, fish</p> <p>Learn more about hooks \u2192</p>"},{"location":"reference/cli-options/#-remove-hooks","title":"<code>--remove-hooks</code>","text":"<p>Remove all shell hooks.</p> <pre><code>$ wtf --remove-hooks\n\n\u2713 Removed wtf hooks from zsh\n  Restart your shell to apply changes\n</code></pre> <p>Removes both error and command-not-found hooks from your shell config.</p>"},{"location":"reference/cli-options/#query-syntax","title":"Query Syntax","text":"<p>After any flags, you can provide a query:</p> <pre><code># Simple query\n$ wtf \"what's my git status?\"\n\n# Multiple words (quotes optional)\n$ wtf how do I exit vim\n\n# With flags\n$ wtf --verbose --model gpt-4 \"explain this error\"\n\n# No query (shows help)\n$ wtf\nNo query provided. Try:\n  wtf \"your question here\"\n  wtf undo\n  wtf --help\n</code></pre> <p>Special queries: - <code>wtf undo</code> - Undo last command - <code>wtf remember X</code> - Save a preference - <code>wtf forget X</code> - Remove a memory - <code>wtf show memories</code> - View all memories - <code>wtf clear memories</code> - Delete all memories</p>"},{"location":"reference/cli-options/#flag-order","title":"Flag Order","text":"<p>Flags can appear before or after the query:</p> <pre><code>\u2713 wtf --verbose \"my query\"\n\u2713 wtf \"my query\" --verbose\n\u2713 wtf --model gpt-4 --verbose \"query\"\n</code></pre> <p>However, some flags exit immediately:</p> <pre><code># These always exit, ignoring other flags/query\nwtf --help\nwtf --version\nwtf --config\nwtf --reset\nwtf --setup\n</code></pre>"},{"location":"reference/cli-options/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success 1 General error (config missing, API error, etc.) 2 Invalid arguments 130 Interrupted (Ctrl+C)"},{"location":"reference/cli-options/#environment-variables","title":"Environment Variables","text":"<p>Some flags can also be set via environment variables:</p> <pre><code># Enable verbose mode\nexport WTF_DEBUG=1\nwtf \"my query\"  # Automatically verbose\n\n# Override model\nexport WTF_MODEL=gpt-4\nwtf \"my query\"  # Uses GPT-4\n</code></pre>"},{"location":"reference/cli-options/#examples","title":"Examples","text":""},{"location":"reference/cli-options/#first-time-setup","title":"First Time Setup","text":"<pre><code>$ wtf \"what's my git status?\"\nNo configuration found. Running setup wizard...\n\nWhich AI provider? [1] Anthropic\nAPI key: sk-ant-...\n\n\u2713 Setup complete!\n</code></pre>"},{"location":"reference/cli-options/#quick-query","title":"Quick Query","text":"<pre><code>$ wtf undo my last commit\n\nLet me check your git history.\n\n\u2713 Checked git log\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 $ git reset --soft HEAD~1     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nRun this? [Y/n]\n</code></pre>"},{"location":"reference/cli-options/#using-different-model","title":"Using Different Model","text":"<pre><code>$ wtf --model gpt-4o \"complex task...\"\n\n# Uses GPT-4o instead of default model\n</code></pre>"},{"location":"reference/cli-options/#checking-config","title":"Checking Config","text":"<pre><code>$ wtf --config\n\nConfiguration:\n  Config directory: ~/.config/wtf/\n  Config file: ~/.config/wtf/config.json\n\nCurrent settings:\n  Model: claude-3.5-sonnet\n  Key source: llm\n</code></pre>"},{"location":"reference/cli-options/#installing-hooks","title":"Installing Hooks","text":"<pre><code>$ wtf --setup-error-hook\n\u2713 Error hook installed\n\n$ wtf --setup-not-found-hook\n\u2713 Command-not-found hook installed\n\n$ exec zsh  # Restart shell\n</code></pre>"},{"location":"reference/cli-options/#see-also","title":"See Also","text":"<ul> <li>Getting Started - Installation and first run</li> <li>Properties - Configurable settings</li> <li>Hooks - Shell integration</li> <li>FAQ - Common questions</li> </ul>"}]}